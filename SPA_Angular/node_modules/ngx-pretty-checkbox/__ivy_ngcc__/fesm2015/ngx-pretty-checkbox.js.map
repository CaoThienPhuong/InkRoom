{"version":3,"file":"ngx-pretty-checkbox.js","sources":["../../../projects/ngx-pretty-checkbox/src/lib/directives/ngx-pretty-icon.directive.ts","../../../projects/ngx-pretty-checkbox/src/lib/directives/ngx-pretty-image.directive.ts","../../../projects/ngx-pretty-checkbox/src/lib/directives/ngx-pretty-svg.directive.ts","../../../projects/ngx-pretty-checkbox/src/lib/model/interfaces.ts","../../../projects/ngx-pretty-checkbox/src/lib/utility.ts","../../../projects/ngx-pretty-checkbox/src/lib/components/ngx-pretty-hover-will-change/ngx-pretty-hover-will-change.component.ts","../../../projects/ngx-pretty-checkbox/src/lib/components/ngx-pretty-hover/ngx-pretty-hover.component.ts","../../../projects/ngx-pretty-checkbox/src/lib/components/ngx-pretty-Indeterminate-will-change/ngx-pretty-Indeterminate-will-change.component.ts","../../../projects/ngx-pretty-checkbox/src/lib/components/ngx-pretty-Indeterminate/ngx-pretty-Indeterminate.component.ts","../../../projects/ngx-pretty-checkbox/src/lib/components/ngx-pretty-toggle-will-change/ngx-pretty-toggle-will-change.component.ts","../../../projects/ngx-pretty-checkbox/src/lib/components/ngx-pretty-toggle/ngx-pretty-toggle.component.ts","../../../projects/ngx-pretty-checkbox/src/lib/components/ngx-pretty-checkbox/ngx-pretty-checkbox.component.ts","../../../projects/ngx-pretty-checkbox/src/lib/components/ngx-pretty-checkbox-will-change/ngx-pretty-checkbox-will-change.component.ts","../../../projects/ngx-pretty-checkbox/src/lib/directives/ngx-pretty-radio-group.directive.ts","../../../projects/ngx-pretty-checkbox/src/lib/components/ngx-pretty-radio/ngx-pretty-radio.component.ts","../../../projects/ngx-pretty-checkbox/src/lib/components/ngx-pretty-radio-will-change/ngx-pretty-radio-will-change.component.ts","../../../projects/ngx-pretty-checkbox/src/lib/ngx-pretty-checkbox.module.ts","../../../projects/ngx-pretty-checkbox/src/public-api.ts","../../../projects/ngx-pretty-checkbox/src/ngx-pretty-checkbox.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[pIcon], [p-icon]'\r\n})\r\nexport class NgxPrettyIconDirective {\r\n\r\n  constructor(private elemRef: ElementRef) {\r\n    this.elemRef.nativeElement.classList.add('icon');\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[pImage], [p-image]'\r\n})\r\nexport class NgxPrettyImageDirective {\r\n\r\n  constructor(private elemRef: ElementRef) {\r\n    this.elemRef.nativeElement.classList.add('image');\r\n  }\r\n\r\n}\r\n","import { Directive, AfterViewInit, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[pSvg], [p-svg]'\r\n})\r\nexport class NgxPrettySvgDirective implements AfterViewInit {\r\n\r\n  constructor(private elemRef: ElementRef) { }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.elemRef.nativeElement.classList.add('svg');\r\n  }\r\n\r\n}\r\n","export enum PrettyCheckBoxToggleType {\r\n  On = 'on',\r\n  Off = 'off'\r\n}\r\nexport enum PrettyCheckboxStroke {\r\n  // Accept Null\r\n  Fill = 'fill',   // Square and Switch\r\n  Thick = 'thick', // Square\r\n  Slim = 'slim' // Switch\r\n}\r\n\r\nexport enum PrettyCheckboxShape {\r\n  // Accept Null\r\n  Curve = 'curve',\r\n  Round = 'round',\r\n}\r\n\r\n\r\nexport enum PrettyCheckboxColor {\r\n  Primary = 'primary',\r\n  Success = 'success',\r\n  Info = 'info',\r\n  Warning = 'warning',\r\n  Danger = 'danger',\r\n}\r\n\r\nexport enum PrettyCheckboxAnimation {\r\n  Smooth = 'smooth',\r\n  Jelly = 'jelly',\r\n  Tada = 'tada',\r\n  Rotate = 'rotate',\r\n  Pulse = 'pulse',\r\n}\r\n\r\nexport interface PrettyCheckBoxChange {\r\n  checked: boolean;\r\n  value: string;\r\n  event: Event;\r\n}\r\n\r\nexport interface PrettyRadioChange {\r\n  checked: boolean;\r\n  value: string;\r\n  event: Event;\r\n}\r\n","import { PrettyCheckboxColor } from './model/interfaces';\r\n// import { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from './model/params';\r\n\r\nexport function getColorClassName(color: PrettyCheckboxColor, outline?: boolean) {\r\n  if (!color) { return null; }\r\n  return 'p-' + color + (outline ? '-o' : '');\r\n}\r\n\r\nexport function strToBoolean(str?: string | boolean): boolean {\r\n  if (typeof str === 'boolean') {\r\n    return str;\r\n  }\r\n\r\n  const regex = /^\\s*(true|1|on|enable)\\s*$/i;\r\n  return regex.test(str);\r\n}\r\n","import { Component, Input, ElementRef, Renderer2, SimpleChanges, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { PrettyCheckboxColor } from '../../model/interfaces';\r\nimport { getColorClassName } from '../../utility';\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-p-hover[will-change], p-hover[will-change]',\r\n  templateUrl: './ngx-pretty-hover-will-change.component.html',\r\n  host: {\r\n    class: `state p-is-hover`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyHoverWillChangeComponent implements OnChanges {\r\n\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2\r\n  ) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.color || changes.outline) {\r\n\r\n      const oldClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.previousValue : this.color,\r\n          changes.outline ? changes.outline.previousValue : null\r\n        );\r\n\r\n      const newClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.currentValue : this.color,\r\n          changes.outline ? changes.outline.currentValue : null\r\n        );\r\n\r\n      this.renderer.removeClass(this.el.nativeElement, oldClass);\r\n      this.renderer.addClass(this.el.nativeElement, newClass);\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, ElementRef, Renderer2, AfterViewInit, ChangeDetectionStrategy, Attribute } from '@angular/core';\r\nimport { PrettyCheckboxColor } from '../../model/interfaces';\r\n\r\n@Component({\r\n  selector: 'ngx-p-hover:not([will-change]), p-hover:not([will-change])',\r\n  templateUrl: 'ngx-pretty-hover.component.html',\r\n  host: {\r\n    class: `state p-is-hover`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyHoverComponent implements AfterViewInit {\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n  ) { }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._color) {\r\n      this.renderer.addClass(this.el.nativeElement,\r\n        `p-${this._color}${this._outline ? '-o' : ''}`\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { Component, Input, ElementRef, Renderer2, SimpleChanges, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { getColorClassName } from '../../utility';\r\nimport { PrettyCheckboxColor } from '../../model/interfaces';\r\n\r\n@Component({\r\n  selector: 'ngx-p-indeterminate[will-change], p-indeterminate[will-change]',\r\n  templateUrl: 'ngx-pretty-Indeterminate-will-change.component.html',\r\n  host: {\r\n    class: `state p-is-indeterminate`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyIndeterminateWillChangeComponent implements OnChanges {\r\n\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.color || changes.outline) {\r\n\r\n      const oldClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.previousValue : this.color,\r\n          changes.outline ? changes.outline.previousValue : null\r\n        );\r\n\r\n      const newClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.currentValue : this.color,\r\n          changes.outline ? changes.outline.currentValue : null\r\n        );\r\n\r\n      this.renderer.removeClass(this.el.nativeElement, oldClass);\r\n      this.renderer.addClass(this.el.nativeElement, newClass);\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, Input, ElementRef, Renderer2, AfterViewInit, ChangeDetectionStrategy, Attribute } from '@angular/core';\r\nimport { PrettyCheckboxColor } from '../../model/interfaces';\r\n\r\n@Component({\r\n  selector: 'ngx-p-indeterminate:not([will-change]), p-indeterminate:not([will-change])',\r\n  templateUrl: 'ngx-pretty-Indeterminate.component.html',\r\n  host: {\r\n    class: `state p-is-indeterminate`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyIndeterminateComponent implements AfterViewInit {\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n  ) { }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._color) {\r\n      this.renderer.addClass(this.el.nativeElement,\r\n        `p-${this._color}${this._outline ? '-o' : ''}`\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { Input, ElementRef, Component, HostBinding, SimpleChanges, OnChanges, Renderer2, ChangeDetectionStrategy } from '@angular/core';\r\nimport { PrettyCheckboxColor, PrettyCheckBoxToggleType } from '../../model/interfaces';\r\nimport { getColorClassName } from '../../utility';\r\n\r\n@Component({\r\n  selector: 'ngx-p-toggle[will-change], p-toggle[will-change]',\r\n  templateUrl: 'ngx-pretty-toggle-will-change.component.html',\r\n  host: {\r\n    'class': 'state',\r\n    '[class.p-on]': 'isToggleOn',\r\n    '[class.p-off]': 'isToggleOff',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyToggleWillChangeComponent implements OnChanges {\r\n\r\n  @Input() type: PrettyCheckBoxToggleType;\r\n\r\n  get isToggleOn() { return this.type === PrettyCheckBoxToggleType.On; }\r\n  get isToggleOff() { return this.type === PrettyCheckBoxToggleType.Off; }\r\n\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.color || changes.outline) {\r\n\r\n      const oldClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.previousValue : this.color,\r\n          changes.outline ? changes.outline.previousValue : null\r\n        );\r\n\r\n      const newClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.currentValue : this.color,\r\n          changes.outline ? changes.outline.currentValue : null\r\n        );\r\n\r\n      this.renderer.removeClass(this.el.nativeElement, oldClass);\r\n      this.renderer.addClass(this.el.nativeElement, newClass);\r\n    }\r\n  }\r\n\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Input, ElementRef, Component, AfterViewInit, Renderer2, ChangeDetectionStrategy, Attribute } from '@angular/core';\r\nimport { PrettyCheckboxColor, PrettyCheckBoxToggleType } from '../../model/interfaces';\r\n\r\n@Component({\r\n  selector: 'ngx-p-toggle:not([will-change]), p-toggle:not([will-change])',\r\n  templateUrl: './ngx-pretty-toggle.component.html',\r\n  host: {\r\n    class: 'state'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyToggleComponent implements AfterViewInit {\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n    @Attribute('type')   private _type: PrettyCheckBoxToggleType,\r\n  ) { }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._color) {\r\n      this.renderer.addClass(this.el.nativeElement,\r\n        `p-${this._color}${this._outline ? '-o' : ''}`\r\n      );\r\n    }\r\n\r\n    this.renderer.addClass(this.el.nativeElement, `p-${this._type}`);\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  Attribute,\r\n  AfterViewInit,\r\n  Renderer2,\r\n  ChangeDetectorRef\r\n  } from '@angular/core';\r\nimport { NgxPrettyIconDirective } from '../../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettySvgDirective } from '../../directives/ngx-pretty-svg.directive';\r\nimport { PrettyCheckboxAnimation, PrettyCheckBoxChange, PrettyCheckboxColor, PrettyCheckboxShape, PrettyCheckboxStroke } from '../../model/interfaces';\r\nimport { strToBoolean } from '../../utility';\r\nimport { NgxPrettyHoverWillChangeComponent } from '../ngx-pretty-hover-will-change/ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyHoverComponent } from '../ngx-pretty-hover/ngx-pretty-hover.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from '../ngx-pretty-Indeterminate-will-change/ngx-pretty-Indeterminate-will-change.component';\r\nimport { NgxPrettyIndeterminateComponent } from '../ngx-pretty-Indeterminate/ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from '../ngx-pretty-toggle-will-change/ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyToggleComponent } from '../ngx-pretty-toggle/ngx-pretty-toggle.component';\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-checkbox:not([will-change]), p-checkbox:not([will-change])',\r\n  templateUrl: './ngx-pretty-checkbox.component.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': 'pretty',\r\n    '[class.p-locked]': 'lock'\r\n  },\r\n  exportAs: 'ngxPrettyCheckbox'\r\n})\r\nexport class NgxPrettyCheckboxComponent implements AfterViewInit {\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value: any;\r\n\r\n\r\n  // @HostBinding(`class.p-locked`)\r\n  @Input() lock = false;\r\n\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @ViewChild('stateElem', { static: false }) private _stateElem: ElementRef;\r\n\r\n  @Output() change = new EventEmitter<PrettyCheckBoxChange>();\r\n\r\n\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) private _iconDir: NgxPrettyIconDirective;\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) private _svgDir: NgxPrettySvgDirective;\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) private _imgDir: NgxPrettyImageDirective;\r\n\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) private _hoverDir: NgxPrettyHoverComponent;\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) private _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n\r\n  @ContentChild(NgxPrettyIndeterminateComponent, {static: false}) private _indeterminateDir: NgxPrettyIndeterminateComponent;\r\n  @ContentChild(NgxPrettyIndeterminateWillChangeComponent, {static: false}) private _indeterminateWillChangeDir: NgxPrettyIndeterminateWillChangeComponent;\r\n\r\n  @ContentChildren(NgxPrettyToggleComponent) public _toggleComps: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) public _toggleWillChangeComps: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private el: ElementRef,\r\n    private cd: ChangeDetectorRef,\r\n\r\n    @Attribute('stroke')      private _stroke: PrettyCheckboxStroke,\r\n    @Attribute('shape')       private _shape: PrettyCheckboxShape,\r\n    @Attribute('animation')   private _animation: PrettyCheckboxAnimation,\r\n    @Attribute('isSwitch')    private _isSwitch = false,\r\n    @Attribute('bigger')      private _bigger = false,\r\n    @Attribute('enableFocus') private _enableFocus = false,\r\n    @Attribute('plain')       private _plain = false,\r\n\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n  ) {\r\n      this._isSwitch    = strToBoolean(this._isSwitch);\r\n      this._bigger      = strToBoolean(this._bigger);\r\n      this._enableFocus = strToBoolean(this._enableFocus);\r\n      this._plain       = strToBoolean(this._plain);\r\n      this._outline     = strToBoolean(this._outline);\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    const el = this.el.nativeElement;\r\n\r\n    if (this._isSwitch)    { this.renderer.addClass(el, `p-switch`); }\r\n    if (this._bigger)      { this.renderer.addClass(el, `p-bigger`); }\r\n    if (this._enableFocus) { this.renderer.addClass(el, `p-has-focus`); }\r\n    if (this._plain)       { this.renderer.addClass(el, `p-plain`); }\r\n\r\n    if (this._stroke)     { this.renderer.addClass(el, `p-${this._stroke}`); }\r\n    if (this._shape)      { this.renderer.addClass(el, `p-${this._shape}`); }\r\n    if (this._animation)  { this.renderer.addClass(el, `p-${this._animation}`); }\r\n\r\n    if (this._iconDir)          { this.renderer.addClass(el, `p-icon`); }\r\n    if (this._svgDir)           { this.renderer.addClass(el, `p-svg`); }\r\n    if (this._imgDir)           { this.renderer.addClass(el, `p-image`); }\r\n\r\n    if (this._hoverDir || this._hoverWillChangeDir) {\r\n      this.renderer.addClass(el, `p-has-hover`);\r\n    }\r\n\r\n    if (this._indeterminateDir || this._indeterminateWillChangeDir) {\r\n      this.renderer.addClass(el, `p-has-indeterminate`);\r\n    }\r\n\r\n    if (this._isToggle) { this.renderer.addClass(el, `p-toggle`); }\r\n\r\n    if (!this._isSwitch && !this._iconDir && !this._svgDir && !this._imgDir) {\r\n      this.renderer.addClass(el, `p-default`);\r\n    }\r\n\r\n    // STATE ELEM\r\n    if (this._color && !this._isToggle) {\r\n      this.renderer.addClass(this._stateElem.nativeElement,\r\n        `p-${this._color}${this._outline ? '-o' : ''}`\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // ---------- PRIVATE METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.checked = checked;\r\n    this.change.emit({ value, checked, event });\r\n  }\r\n\r\n  public get _isToggle() { return this._toggleComps.length === 2 || this._toggleWillChangeComps.length === 2; }\r\n\r\n  // ---------- PUBLIC METHODS ---------\r\n  public setIndeterminate(value = true) {\r\n    this._inputElem.nativeElement.indeterminate = value;\r\n  }\r\n\r\n  public forceCheck(check: boolean) {\r\n    this.checked = check;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n  } from '@angular/core';\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckBoxChange,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke,\r\n  } from '../../model/interfaces';\r\nimport { NgxPrettyToggleComponent } from '../ngx-pretty-toggle/ngx-pretty-toggle.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from '../ngx-pretty-toggle-will-change/ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyIconDirective } from '../../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettySvgDirective } from '../../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyImageDirective } from '../../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyHoverWillChangeComponent } from '../ngx-pretty-hover-will-change/ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyHoverComponent } from '../ngx-pretty-hover/ngx-pretty-hover.component';\r\nimport { NgxPrettyIndeterminateComponent } from '../ngx-pretty-Indeterminate/ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from '../ngx-pretty-Indeterminate-will-change/ngx-pretty-Indeterminate-will-change.component';\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-checkbox[will-change], p-checkbox[will-change]',\r\n  templateUrl: './ngx-pretty-checkbox-will-change.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': 'pretty',\r\n    '[class.p-switch]': 'isSwitch',\r\n    '[class.p-locked]': 'lock',\r\n    '[class.p-bigger]': 'bigger',\r\n    '[class.p-has-focus]': 'enableFocus',\r\n    '[class.p-plain]': 'plain',\r\n    '[class.p-fill]': '_isFill',\r\n    '[class.p-slim]': '_isSlim',\r\n    '[class.p-thick]': '_isThick',\r\n    '[class.p-curve]': '_isCurve',\r\n    '[class.p-round]': '_isRound',\r\n    '[class.p-smooth]': '_isSmooth',\r\n    '[class.p-jelly]': '_isJelly',\r\n    '[class.p-tada]': '_isTada',\r\n    '[class.p-rotate]': '_isRotate',\r\n    '[class.p-pulse]': '_isPulse',\r\n    '[class.p-toggle]': '_isToggle',\r\n    '[class.p-default]': '_isDefault',\r\n    '[class.p-icon]': '_iconElem',\r\n    '[class.p-svg]': '_svgElem',\r\n    '[class.p-image]': '_imageElem',\r\n    '[class.p-has-hover]': '_isHover',\r\n    '[class.p-has-indeterminate]': '_isIndeterminate',\r\n  },\r\n  exportAs: 'ngxPrettyCheckboxWillChange'\r\n})\r\nexport class NgxPrettyCheckboxWillChangeComponent {\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @Output() change = new EventEmitter<PrettyCheckBoxChange>();\r\n\r\n\r\n  // ---------- INPUTS ----------\r\n  @Input() stroke: PrettyCheckboxStroke;\r\n  @Input() shape: PrettyCheckboxShape;\r\n  @Input() animation: PrettyCheckboxAnimation;\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false; // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value: any;\r\n\r\n\r\n  // ----- INPUTS AND BINDING ------\r\n  @Input() isSwitch = false;\r\n  @Input() lock = false;\r\n  @Input() bigger = false;\r\n  @Input() enableFocus = false;\r\n  @Input() plain = false; // To remove the border ( when checkbox is checked )\r\n\r\n\r\n  // ---------- STROKE ----------\r\n  get _isFill() { return this.stroke === PrettyCheckboxStroke.Fill; }\r\n  get _isSlim() { return this.stroke === PrettyCheckboxStroke.Slim; }\r\n  get _isThick() { return this.stroke === PrettyCheckboxStroke.Thick; }\r\n\r\n  // ---------- SHAPE ----------\r\n  get _isCurve() { return this.shape === PrettyCheckboxShape.Curve; }\r\n  get _isRound() { return this.shape === PrettyCheckboxShape.Round; }\r\n\r\n  // ---------- ANIMATION ----------\r\n  get _isSmooth() { return this.animation === PrettyCheckboxAnimation.Smooth; }\r\n  get _isJelly() { return this.animation === PrettyCheckboxAnimation.Jelly; }\r\n  get _isTada() { return this.animation === PrettyCheckboxAnimation.Tada; }\r\n  get _isRotate() { return this.animation === PrettyCheckboxAnimation.Rotate; }\r\n  get _isPulse() { return this.animation === PrettyCheckboxAnimation.Pulse; }\r\n\r\n  // ---------- BINDING ----------\r\n  // Toggle\r\n  @ContentChildren(NgxPrettyToggleComponent) _toggleComp: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) _toggleWillChangeComp: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n  get _isToggle() { return this._toggleComp.length === 2 || this._toggleWillChangeComp.length === 2; }\r\n\r\n  // DEFAULT\r\n  get _isDefault() { return !this.isSwitch && !this._iconElem && !this._svgElem && !this._imageElem; }\r\n\r\n\r\n\r\n  // ----- CHILD SELECTOR AND BINDING -----\r\n  // ICON\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) _iconElem: NgxPrettyIconDirective;\r\n\r\n  // SVG\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) _svgElem: NgxPrettySvgDirective;\r\n\r\n  // IMAGE\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) _imageElem: NgxPrettyImageDirective;\r\n\r\n  // HOVER\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) _hoverComp: NgxPrettyHoverComponent;\r\n  get _isHover() { return this._hoverComp || this._hoverWillChangeDir; }\r\n\r\n  // Indeterminate\r\n  @ContentChild(NgxPrettyIndeterminateComponent, {static: false}) _indeterminateComp: NgxPrettyIndeterminateComponent;\r\n  @ContentChild(NgxPrettyIndeterminateWillChangeComponent, {static: false}) _indeterminateWillChangeComp: NgxPrettyIndeterminateWillChangeComponent;\r\n  get _isIndeterminate() { return this._indeterminateComp || this._indeterminateWillChangeComp; }\r\n\r\n\r\n  // ---------- PRIVATE METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up\r\n    event.stopPropagation();\r\n    this.checked = checked;\r\n    this.change.emit({ value, checked, event });\r\n  }\r\n\r\n  // ---------- PUBLIC METHODS ---------\r\n  public setIndeterminate(value = true) {\r\n    this._inputElem.nativeElement.indeterminate = value;\r\n  }\r\n\r\n  public forceCheck(check: boolean) {\r\n    this.checked = check;\r\n    this.cd.markForCheck();\r\n  }\r\n}\r\n\r\n\r\n","import { Directive, Output, EventEmitter } from '@angular/core';\r\n// import { NgxPrettyRadioService } from '../ngx-pretty-checkbox.service';\r\n// import { GROUP_NAME } from '../model/params';\r\nimport { PrettyRadioChange } from '../model/interfaces';\r\n\r\nlet nextId = 1;\r\n\r\n@Directive({\r\n  selector: 'ngx-pretty-radio-group, p-radio-group',\r\n  // providers: [NgxPrettyRadioService],\r\n  exportAs: 'ngxRadioGroup'\r\n})\r\nexport class NgxPrettyRadioGroupDirective {\r\n\r\n  public name = 'p-radio' + nextId++;\r\n\r\n  @Output() change = new EventEmitter<PrettyRadioChange>();\r\n\r\n  constructor() {}\r\n\r\n  public _emitChange(event: PrettyRadioChange) {\r\n    this.change.emit(event);\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  Attribute,\r\n  AfterViewInit,\r\n  Renderer2,\r\n  Optional,\r\n  } from '@angular/core';\r\n\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke,\r\n  PrettyRadioChange\r\n  } from '../../model/interfaces';\r\nimport { strToBoolean } from '../../utility';\r\nimport { NgxPrettyIconDirective } from '../../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyRadioGroupDirective } from '../../directives/ngx-pretty-radio-group.directive';\r\nimport { NgxPrettySvgDirective } from '../../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyHoverWillChangeComponent } from '../ngx-pretty-hover-will-change/ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyHoverComponent } from '../ngx-pretty-hover/ngx-pretty-hover.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from '../ngx-pretty-toggle-will-change/ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyToggleComponent } from '../ngx-pretty-toggle/ngx-pretty-toggle.component';\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-radio:not([will-change]), p-radio:not([will-change])',\r\n  templateUrl: 'ngx-pretty-radio.component.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': 'pretty',\r\n    '[class.p-locked]': 'lock'\r\n  },\r\n  exportAs: 'ngxPrettyRadio'\r\n})\r\nexport class NgxPrettyRadioComponent implements AfterViewInit {\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value: any;\r\n  @Input() lock = false;\r\n\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @ViewChild('stateElem', { static: false }) private _stateElem: ElementRef;\r\n\r\n  @Output() change = new EventEmitter<PrettyRadioChange>();\r\n\r\n\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) private _iconDir: NgxPrettyIconDirective;\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) private _svgDir: NgxPrettySvgDirective;\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) private _imgDir: NgxPrettyImageDirective;\r\n\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) private _hoverDir: NgxPrettyHoverComponent;\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) private _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n\r\n  @ContentChildren(NgxPrettyToggleComponent) public _toggleComps: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) public _toggleWillChangeComps: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private el: ElementRef,\r\n    @Optional() private radioGroup: NgxPrettyRadioGroupDirective,\r\n\r\n    @Attribute('stroke')      private _stroke: PrettyCheckboxStroke,\r\n    @Attribute('shape')       private _shape: PrettyCheckboxShape,\r\n    @Attribute('animation')   private _animation: PrettyCheckboxAnimation,\r\n    @Attribute('isSwitch')    private _isSwitch = false,\r\n    @Attribute('bigger')      private _bigger = false,\r\n    @Attribute('enableFocus') private _enableFocus = false,\r\n    @Attribute('plain')       private _plain = false,\r\n\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n    @Attribute('name')   public _name: string,\r\n    ) {\r\n      if (!this._name && this.radioGroup) {\r\n        this._name = this.radioGroup.name;\r\n      }\r\n\r\n      this._isSwitch    = strToBoolean(this._isSwitch);\r\n      this._bigger      = strToBoolean(this._bigger);\r\n      this._enableFocus = strToBoolean(this._enableFocus);\r\n      this._plain       = strToBoolean(this._plain);\r\n      this._outline     = strToBoolean(this._outline);\r\n    }\r\n\r\n\r\n  ngAfterViewInit(): void {\r\n    const el = this.el.nativeElement;\r\n\r\n    if (this._isSwitch)    { this.renderer.addClass(el, `p-switch`); }\r\n    if (this._bigger)      { this.renderer.addClass(el, `p-bigger`); }\r\n    if (this._enableFocus) { this.renderer.addClass(el, `p-has-focus`); }\r\n    if (this._plain)       { this.renderer.addClass(el, `p-plain`); }\r\n\r\n    if (this._stroke)     { this.renderer.addClass(el, `p-${this._stroke}`); }\r\n    if (this._shape)      { this.renderer.addClass(el, `p-${this._shape}`); }\r\n    if (this._animation)  { this.renderer.addClass(el, `p-${this._animation}`); }\r\n\r\n    if (this._iconDir)          { this.renderer.addClass(el, `p-icon`); }\r\n    if (this._svgDir)           { this.renderer.addClass(el, `p-svg`); }\r\n    if (this._imgDir)           { this.renderer.addClass(el, `p-image`); }\r\n\r\n    if (this._hoverDir || this._hoverWillChangeDir) {\r\n      this.renderer.addClass(el, `p-has-hover`);\r\n    }\r\n\r\n    if (this._isToggle) { this.renderer.addClass(el, `p-toggle`); }\r\n\r\n    if (!this._isSwitch && !this._iconDir && !this._svgDir && !this._imgDir) {\r\n      this.renderer.addClass(el, `p-default`);\r\n    }\r\n\r\n    // STATE ELEM\r\n    if (this._color && !this._isToggle) {\r\n      this.renderer.addClass(this._stateElem.nativeElement,\r\n        `p-${this._color}${this._outline ? '-o' : ''}`\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // ---------- METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.change.emit({ value, checked, event });\r\n\r\n    if (this.radioGroup) {\r\n      this.radioGroup._emitChange({ value, checked, event });\r\n    }\r\n  }\r\n\r\n  public get _isToggle() { return this._toggleComps.length === 2 || this._toggleWillChangeComps.length === 2; }\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  Optional\r\n  } from '@angular/core';\r\n\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckBoxChange,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke,\r\n  } from '../../model/interfaces';\r\nimport { NgxPrettyRadioGroupDirective } from '../../directives/ngx-pretty-radio-group.directive';\r\nimport { NgxPrettyHoverWillChangeComponent } from '../ngx-pretty-hover-will-change/ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from '../ngx-pretty-toggle-will-change/ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyIconDirective } from '../../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettySvgDirective } from '../../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyHoverComponent } from '../ngx-pretty-hover/ngx-pretty-hover.component';\r\nimport { NgxPrettyToggleComponent } from '../ngx-pretty-toggle/ngx-pretty-toggle.component';\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-radio[will-change], p-radio[will-change]',\r\n  templateUrl: 'ngx-pretty-radio-will-change.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': 'pretty',\r\n    '[class.p-switch]': 'isSwitch',\r\n    '[class.p-locked]': 'lock',\r\n    '[class.p-bigger]': 'bigger',\r\n    '[class.p-has-focus]': 'enableFocus',\r\n    '[class.p-plain]': 'plain',\r\n    '[class.p-fill]': '_isFill',\r\n    '[class.p-thick]': '_isSlim',\r\n    '[class.p-slim]': '_isThick',\r\n    '[class.p-curve]': '_isCurve',\r\n    '[class.p-round]': '_isRound',\r\n    '[class.p-smooth]': '_isSmooth',\r\n    '[class.p-jelly]': '_isJelly',\r\n    '[class.p-tada]': '_isTada',\r\n    '[class.p-rotate]': '_isRotate',\r\n    '[class.p-pulse]': '_isPulse',\r\n    '[class.p-toggle]': '_isToggle',\r\n    '[class.p-default]': '_isDefault',\r\n    '[class.p-icon]': '_iconElem',\r\n    '[class.p-svg]': '_svgElem',\r\n    '[class.p-image]': '_imageElem',\r\n    '[class.p-has-hover]': '_isHover',\r\n  },\r\n  exportAs: 'ngxPrettyRadio'\r\n})\r\nexport class NgxPrettyRadioWillChangeComponent {\r\n\r\n  constructor(@Optional() private radioGroup: NgxPrettyRadioGroupDirective) {\r\n    if (radioGroup) {\r\n      this.radioGroupName = radioGroup.name;\r\n    }\r\n  }\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @Output() change = new EventEmitter<PrettyCheckBoxChange>();\r\n\r\n\r\n  // ---------- INPUTS ----------\r\n  @Input() stroke: PrettyCheckboxStroke;\r\n  @Input() shape: PrettyCheckboxShape;\r\n  @Input() animation: PrettyCheckboxAnimation;\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false; // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value: any;\r\n\r\n  public radioGroupName: string;\r\n  @Input() name: string;\r\n\r\n\r\n  // ----- INPUTS AND BINDING ------\r\n  @Input() isSwitch = false;\r\n  @Input() lock = false;\r\n  @Input() bigger = false;\r\n  @Input() enableFocus = false;\r\n  @Input() plain = false; // To remove the border ( when checkbox is checked )\r\n\r\n  // ---------- STROKE ----------\r\n  get _isFill() { return this.stroke === PrettyCheckboxStroke.Fill; }\r\n  get _isSlim() { return this.stroke === PrettyCheckboxStroke.Slim; }\r\n  get _isThick() { return this.stroke === PrettyCheckboxStroke.Thick; }\r\n\r\n  // ---------- SHAPE ----------\r\n  get _isCurve() { return this.shape === PrettyCheckboxShape.Curve; }\r\n  get _isRound() { return this.shape === PrettyCheckboxShape.Round; }\r\n\r\n  // ---------- ANIMATION ----------\r\n  get _isSmooth() { return this.animation === PrettyCheckboxAnimation.Smooth; }\r\n  get _isJelly() { return this.animation === PrettyCheckboxAnimation.Jelly; }\r\n  get _isTada() { return this.animation === PrettyCheckboxAnimation.Tada; }\r\n  get _isRotate() { return this.animation === PrettyCheckboxAnimation.Rotate; }\r\n  get _isPulse() { return this.animation === PrettyCheckboxAnimation.Pulse; }\r\n\r\n  // ---------- BINDING ----------\r\n  // Toggle\r\n  @ContentChildren(NgxPrettyToggleComponent) _toggleComp: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) _toggleWillChangeComp: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n  get _isToggle() { return this._toggleComp.length === 2 || this._toggleWillChangeComp.length === 2; }\r\n\r\n  // DEFAULT\r\n  get _isDefault() { return !this.isSwitch && !this._iconElem && !this._svgElem && !this._imageElem; }\r\n\r\n\r\n\r\n  // ----- CHILD SELECTOR AND BINDING -----\r\n  // ICON\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) _iconElem: NgxPrettyIconDirective;\r\n\r\n  // SVG\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) _svgElem: NgxPrettySvgDirective;\r\n\r\n  // IMAGE\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) _imageElem: NgxPrettyImageDirective;\r\n\r\n  // HOVER\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) _hoverComp: NgxPrettyHoverComponent;\r\n  get _isHover() { return this._hoverComp || this._hoverWillChangeDir; }\r\n\r\n\r\n  // ---------- METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.change.emit({ value, checked, event });\r\n\r\n    if (this.radioGroup) {\r\n      this.radioGroup._emitChange({ value, checked, event });\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgxPrettyCheckboxWillChangeComponent } from './components/ngx-pretty-checkbox-will-change/ngx-pretty-checkbox-will-change.component';\r\nimport { NgxPrettyCheckboxComponent } from './components/ngx-pretty-checkbox/ngx-pretty-checkbox.component';\r\nimport { NgxPrettyHoverWillChangeComponent } from './components/ngx-pretty-hover-will-change/ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyHoverComponent } from './components/ngx-pretty-hover/ngx-pretty-hover.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from './components/ngx-pretty-Indeterminate-will-change/ngx-pretty-Indeterminate-will-change.component';\r\nimport { NgxPrettyIndeterminateComponent } from './components/ngx-pretty-Indeterminate/ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettyRadioWillChangeComponent } from './components/ngx-pretty-radio-will-change/ngx-pretty-radio-will-change.component';\r\nimport { NgxPrettyRadioComponent } from './components/ngx-pretty-radio/ngx-pretty-radio.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './components/ngx-pretty-toggle-will-change/ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyToggleComponent } from './components/ngx-pretty-toggle/ngx-pretty-toggle.component';\r\nimport { NgxPrettyIconDirective } from './directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from './directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyRadioGroupDirective } from './directives/ngx-pretty-radio-group.directive';\r\nimport { NgxPrettySvgDirective } from './directives/ngx-pretty-svg.directive';\r\n\r\nconst DECLARATIONS = [\r\n  NgxPrettyCheckboxComponent,\r\n  NgxPrettyCheckboxWillChangeComponent,\r\n\r\n  NgxPrettyIconDirective,\r\n  NgxPrettySvgDirective,\r\n  NgxPrettyImageDirective,\r\n\r\n  NgxPrettyToggleComponent,\r\n  NgxPrettyToggleWillChangeComponent,\r\n\r\n  NgxPrettyHoverComponent,\r\n  NgxPrettyHoverWillChangeComponent,\r\n\r\n  NgxPrettyIndeterminateComponent,\r\n  NgxPrettyIndeterminateWillChangeComponent,\r\n\r\n  NgxPrettyRadioGroupDirective,\r\n  NgxPrettyRadioComponent,\r\n  NgxPrettyRadioWillChangeComponent\r\n];\r\n\r\n\r\n@NgModule({\r\n  declarations: [ DECLARATIONS ],\r\n  imports: [ CommonModule, FormsModule ],\r\n  exports: [ DECLARATIONS ]\r\n})\r\nexport class NgxPrettyCheckboxModule { }\r\n","/*\r\n * Public API Surface of ngx-pretty-checkbox\r\n */\r\n\r\nexport * from './lib/components/ngx-pretty-checkbox/ngx-pretty-checkbox.component';\r\nexport * from './lib/components/ngx-pretty-checkbox-will-change/ngx-pretty-checkbox-will-change.component';\r\n\r\nexport * from './lib/components/ngx-pretty-hover/ngx-pretty-hover.component';\r\nexport * from './lib/components/ngx-pretty-hover-will-change/ngx-pretty-hover-will-change.component';\r\n\r\nexport * from './lib/components/ngx-pretty-Indeterminate/ngx-pretty-Indeterminate.component';\r\nexport * from './lib/components/ngx-pretty-Indeterminate-will-change//ngx-pretty-Indeterminate-will-change.component';\r\n\r\nexport * from './lib/components/ngx-pretty-toggle/ngx-pretty-toggle.component';\r\nexport * from './lib/components/ngx-pretty-toggle-will-change/ngx-pretty-toggle-will-change.component';\r\n\r\nexport * from './lib/components/ngx-pretty-radio/ngx-pretty-radio.component';\r\nexport * from './lib/components/ngx-pretty-radio-will-change/ngx-pretty-radio-will-change.component';\r\n\r\n\r\nexport * from './lib/directives/ngx-pretty-radio-group.directive';\r\n\r\nexport * from './lib/directives/ngx-pretty-icon.directive';\r\nexport * from './lib/directives/ngx-pretty-image.directive';\r\nexport * from './lib/directives/ngx-pretty-svg.directive';\r\n\r\n\r\nexport * from './lib/ngx-pretty-checkbox.module';\r\nexport * from './lib/model/interfaces';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}
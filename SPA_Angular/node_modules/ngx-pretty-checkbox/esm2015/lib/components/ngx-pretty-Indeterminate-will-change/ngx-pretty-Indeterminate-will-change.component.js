import { Component, Input, ElementRef, Renderer2, ChangeDetectionStrategy } from '@angular/core';
import { getColorClassName } from '../../utility';
export class NgxPrettyIndeterminateWillChangeComponent {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.outline = false;
    }
    ngOnChanges(changes) {
        if (changes.color || changes.outline) {
            const oldClass = getColorClassName(changes.color ? changes.color.previousValue : this.color, changes.outline ? changes.outline.previousValue : null);
            const newClass = getColorClassName(changes.color ? changes.color.currentValue : this.color, changes.outline ? changes.outline.currentValue : null);
            this.renderer.removeClass(this.el.nativeElement, oldClass);
            this.renderer.addClass(this.el.nativeElement, newClass);
        }
    }
}
NgxPrettyIndeterminateWillChangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-p-indeterminate[will-change], p-indeterminate[will-change]',
                template: "<ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n\r\n<label><ng-content></ng-content></label>",
                host: {
                    class: `state p-is-indeterminate`
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
NgxPrettyIndeterminateWillChangeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
NgxPrettyIndeterminateWillChangeComponent.propDecorators = {
    color: [{ type: Input }],
    outline: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS1JbmRldGVybWluYXRlLXdpbGwtY2hhbmdlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1wcmV0dHktY2hlY2tib3gvc3JjL2xpYi9jb21wb25lbnRzL25neC1wcmV0dHktSW5kZXRlcm1pbmF0ZS13aWxsLWNoYW5nZS9uZ3gtcHJldHR5LUluZGV0ZXJtaW5hdGUtd2lsbC1jaGFuZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQTRCLHVCQUF1QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVdsRCxNQUFNLE9BQU8seUNBQXlDO0lBS3BELFlBQW9CLEVBQWMsRUFBVSxRQUFtQjtRQUEzQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUZ0RCxZQUFPLEdBQUcsS0FBSyxDQUFDO0lBRTBDLENBQUM7SUFFcEUsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO1lBRXBDLE1BQU0sUUFBUSxHQUNaLGlCQUFpQixDQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUN4RCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN2RCxDQUFDO1lBRUosTUFBTSxRQUFRLEdBQ1osaUJBQWlCLENBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQ3ZELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3RELENBQUM7WUFFSixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUMzRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUN6RDtJQUNILENBQUM7OztZQWpDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdFQUFnRTtnQkFDMUUsd0pBQWtFO2dCQUNsRSxJQUFJLEVBQUU7b0JBQ0osS0FBSyxFQUFFLDBCQUEwQjtpQkFDbEM7Z0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDaEQ7OztZQVgwQixVQUFVO1lBQUUsU0FBUzs7O29CQWM3QyxLQUFLO3NCQUNMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMsIE9uQ2hhbmdlcywgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgZ2V0Q29sb3JDbGFzc05hbWUgfSBmcm9tICcuLi8uLi91dGlsaXR5JztcclxuaW1wb3J0IHsgUHJldHR5Q2hlY2tib3hDb2xvciB9IGZyb20gJy4uLy4uL21vZGVsL2ludGVyZmFjZXMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZ3gtcC1pbmRldGVybWluYXRlW3dpbGwtY2hhbmdlXSwgcC1pbmRldGVybWluYXRlW3dpbGwtY2hhbmdlXScsXHJcbiAgdGVtcGxhdGVVcmw6ICduZ3gtcHJldHR5LUluZGV0ZXJtaW5hdGUtd2lsbC1jaGFuZ2UuY29tcG9uZW50Lmh0bWwnLFxyXG4gIGhvc3Q6IHtcclxuICAgIGNsYXNzOiBgc3RhdGUgcC1pcy1pbmRldGVybWluYXRlYFxyXG4gIH0sXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neFByZXR0eUluZGV0ZXJtaW5hdGVXaWxsQ2hhbmdlQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuXHJcbiAgQElucHV0KCkgY29sb3I6IFByZXR0eUNoZWNrYm94Q29sb3I7XHJcbiAgQElucHV0KCkgb3V0bGluZSA9IGZhbHNlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHsgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICBpZiAoY2hhbmdlcy5jb2xvciB8fCBjaGFuZ2VzLm91dGxpbmUpIHtcclxuXHJcbiAgICAgIGNvbnN0IG9sZENsYXNzID1cclxuICAgICAgICBnZXRDb2xvckNsYXNzTmFtZShcclxuICAgICAgICAgIGNoYW5nZXMuY29sb3IgPyBjaGFuZ2VzLmNvbG9yLnByZXZpb3VzVmFsdWUgOiB0aGlzLmNvbG9yLFxyXG4gICAgICAgICAgY2hhbmdlcy5vdXRsaW5lID8gY2hhbmdlcy5vdXRsaW5lLnByZXZpb3VzVmFsdWUgOiBudWxsXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnN0IG5ld0NsYXNzID1cclxuICAgICAgICBnZXRDb2xvckNsYXNzTmFtZShcclxuICAgICAgICAgIGNoYW5nZXMuY29sb3IgPyBjaGFuZ2VzLmNvbG9yLmN1cnJlbnRWYWx1ZSA6IHRoaXMuY29sb3IsXHJcbiAgICAgICAgICBjaGFuZ2VzLm91dGxpbmUgPyBjaGFuZ2VzLm91dGxpbmUuY3VycmVudFZhbHVlIDogbnVsbFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgb2xkQ2xhc3MpO1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgbmV3Q2xhc3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIl19
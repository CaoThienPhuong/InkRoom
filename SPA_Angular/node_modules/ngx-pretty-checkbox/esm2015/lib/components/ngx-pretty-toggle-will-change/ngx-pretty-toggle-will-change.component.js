import { Input, ElementRef, Component, Renderer2, ChangeDetectionStrategy } from '@angular/core';
import { PrettyCheckBoxToggleType } from '../../model/interfaces';
import { getColorClassName } from '../../utility';
export class NgxPrettyToggleWillChangeComponent {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.outline = false;
    }
    get isToggleOn() { return this.type === PrettyCheckBoxToggleType.On; }
    get isToggleOff() { return this.type === PrettyCheckBoxToggleType.Off; }
    ngOnChanges(changes) {
        if (changes.color || changes.outline) {
            const oldClass = getColorClassName(changes.color ? changes.color.previousValue : this.color, changes.outline ? changes.outline.previousValue : null);
            const newClass = getColorClassName(changes.color ? changes.color.currentValue : this.color, changes.outline ? changes.outline.currentValue : null);
            this.renderer.removeClass(this.el.nativeElement, oldClass);
            this.renderer.addClass(this.el.nativeElement, newClass);
        }
    }
}
NgxPrettyToggleWillChangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-p-toggle[will-change], p-toggle[will-change]',
                template: "<ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n<label><ng-content></ng-content></label>",
                host: {
                    'class': 'state',
                    '[class.p-on]': 'isToggleOn',
                    '[class.p-off]': 'isToggleOff',
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
NgxPrettyToggleWillChangeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
NgxPrettyToggleWillChangeComponent.propDecorators = {
    type: [{ type: Input }],
    color: [{ type: Input }],
    outline: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS10b2dnbGUtd2lsbC1jaGFuZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXByZXR0eS1jaGVja2JveC9zcmMvbGliL2NvbXBvbmVudHMvbmd4LXByZXR0eS10b2dnbGUtd2lsbC1jaGFuZ2Uvbmd4LXByZXR0eS10b2dnbGUtd2lsbC1jaGFuZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBeUMsU0FBUyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hJLE9BQU8sRUFBdUIsd0JBQXdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN2RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFZbEQsTUFBTSxPQUFPLGtDQUFrQztJQVU3QyxZQUFvQixFQUFjLEVBQVUsUUFBbUI7UUFBM0MsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFGdEQsWUFBTyxHQUFHLEtBQUssQ0FBQztJQUUwQyxDQUFDO0lBTnBFLElBQUksVUFBVSxLQUFLLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyx3QkFBd0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RFLElBQUksV0FBVyxLQUFLLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBT3hFLFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUVwQyxNQUFNLFFBQVEsR0FDWixpQkFBaUIsQ0FDZixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFDeEQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDdkQsQ0FBQztZQUVKLE1BQU0sUUFBUSxHQUNaLGlCQUFpQixDQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUN2RCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN0RCxDQUFDO1lBRUosSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDM0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDekQ7SUFDSCxDQUFDOzs7WUF4Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrREFBa0Q7Z0JBQzVELG9KQUEyRDtnQkFDM0QsSUFBSSxFQUFFO29CQUNKLE9BQU8sRUFBRSxPQUFPO29CQUNoQixjQUFjLEVBQUUsWUFBWTtvQkFDNUIsZUFBZSxFQUFFLGFBQWE7aUJBQy9CO2dCQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7WUFiZSxVQUFVO1lBQW9ELFNBQVM7OzttQkFnQnBGLEtBQUs7b0JBS0wsS0FBSztzQkFDTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIEVsZW1lbnRSZWYsIENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIFNpbXBsZUNoYW5nZXMsIE9uQ2hhbmdlcywgUmVuZGVyZXIyLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQcmV0dHlDaGVja2JveENvbG9yLCBQcmV0dHlDaGVja0JveFRvZ2dsZVR5cGUgfSBmcm9tICcuLi8uLi9tb2RlbC9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgZ2V0Q29sb3JDbGFzc05hbWUgfSBmcm9tICcuLi8uLi91dGlsaXR5JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbmd4LXAtdG9nZ2xlW3dpbGwtY2hhbmdlXSwgcC10b2dnbGVbd2lsbC1jaGFuZ2VdJyxcclxuICB0ZW1wbGF0ZVVybDogJ25neC1wcmV0dHktdG9nZ2xlLXdpbGwtY2hhbmdlLmNvbXBvbmVudC5odG1sJyxcclxuICBob3N0OiB7XHJcbiAgICAnY2xhc3MnOiAnc3RhdGUnLFxyXG4gICAgJ1tjbGFzcy5wLW9uXSc6ICdpc1RvZ2dsZU9uJyxcclxuICAgICdbY2xhc3MucC1vZmZdJzogJ2lzVG9nZ2xlT2ZmJyxcclxuICB9LFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hQcmV0dHlUb2dnbGVXaWxsQ2hhbmdlQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuXHJcbiAgQElucHV0KCkgdHlwZTogUHJldHR5Q2hlY2tCb3hUb2dnbGVUeXBlO1xyXG5cclxuICBnZXQgaXNUb2dnbGVPbigpIHsgcmV0dXJuIHRoaXMudHlwZSA9PT0gUHJldHR5Q2hlY2tCb3hUb2dnbGVUeXBlLk9uOyB9XHJcbiAgZ2V0IGlzVG9nZ2xlT2ZmKCkgeyByZXR1cm4gdGhpcy50eXBlID09PSBQcmV0dHlDaGVja0JveFRvZ2dsZVR5cGUuT2ZmOyB9XHJcblxyXG4gIEBJbnB1dCgpIGNvbG9yOiBQcmV0dHlDaGVja2JveENvbG9yO1xyXG4gIEBJbnB1dCgpIG91dGxpbmUgPSBmYWxzZTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7IH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgaWYgKGNoYW5nZXMuY29sb3IgfHwgY2hhbmdlcy5vdXRsaW5lKSB7XHJcblxyXG4gICAgICBjb25zdCBvbGRDbGFzcyA9XHJcbiAgICAgICAgZ2V0Q29sb3JDbGFzc05hbWUoXHJcbiAgICAgICAgICBjaGFuZ2VzLmNvbG9yID8gY2hhbmdlcy5jb2xvci5wcmV2aW91c1ZhbHVlIDogdGhpcy5jb2xvcixcclxuICAgICAgICAgIGNoYW5nZXMub3V0bGluZSA/IGNoYW5nZXMub3V0bGluZS5wcmV2aW91c1ZhbHVlIDogbnVsbFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICBjb25zdCBuZXdDbGFzcyA9XHJcbiAgICAgICAgZ2V0Q29sb3JDbGFzc05hbWUoXHJcbiAgICAgICAgICBjaGFuZ2VzLmNvbG9yID8gY2hhbmdlcy5jb2xvci5jdXJyZW50VmFsdWUgOiB0aGlzLmNvbG9yLFxyXG4gICAgICAgICAgY2hhbmdlcy5vdXRsaW5lID8gY2hhbmdlcy5vdXRsaW5lLmN1cnJlbnRWYWx1ZSA6IG51bGxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIG9sZENsYXNzKTtcclxuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIG5ld0NsYXNzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdfQ==
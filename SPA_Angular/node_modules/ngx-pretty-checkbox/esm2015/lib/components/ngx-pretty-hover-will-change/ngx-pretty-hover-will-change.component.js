import { Component, Input, ElementRef, Renderer2, ChangeDetectionStrategy } from '@angular/core';
import { getColorClassName } from '../../utility';
export class NgxPrettyHoverWillChangeComponent {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.outline = false;
    }
    ngOnChanges(changes) {
        if (changes.color || changes.outline) {
            const oldClass = getColorClassName(changes.color ? changes.color.previousValue : this.color, changes.outline ? changes.outline.previousValue : null);
            const newClass = getColorClassName(changes.color ? changes.color.currentValue : this.color, changes.outline ? changes.outline.currentValue : null);
            this.renderer.removeClass(this.el.nativeElement, oldClass);
            this.renderer.addClass(this.el.nativeElement, newClass);
        }
    }
}
NgxPrettyHoverWillChangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-p-hover[will-change], p-hover[will-change]',
                template: "<ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n\r\n<label><ng-content></ng-content></label>",
                host: {
                    class: `state p-is-hover`
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
NgxPrettyHoverWillChangeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
NgxPrettyHoverWillChangeComponent.propDecorators = {
    color: [{ type: Input }],
    outline: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS1ob3Zlci13aWxsLWNoYW5nZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcHJldHR5LWNoZWNrYm94L3NyYy9saWIvY29tcG9uZW50cy9uZ3gtcHJldHR5LWhvdmVyLXdpbGwtY2hhbmdlL25neC1wcmV0dHktaG92ZXItd2lsbC1jaGFuZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQTRCLHVCQUF1QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVdsRCxNQUFNLE9BQU8saUNBQWlDO0lBSzVDLFlBQ1UsRUFBYyxFQUNkLFFBQW1CO1FBRG5CLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBSnBCLFlBQU8sR0FBRyxLQUFLLENBQUM7SUFLckIsQ0FBQztJQUVMLFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUVwQyxNQUFNLFFBQVEsR0FDWixpQkFBaUIsQ0FDZixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFDeEQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDdkQsQ0FBQztZQUVKLE1BQU0sUUFBUSxHQUNaLGlCQUFpQixDQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUN2RCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN0RCxDQUFDO1lBRUosSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDM0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDekQ7SUFDSCxDQUFDOzs7WUFwQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnREFBZ0Q7Z0JBQzFELHdKQUE0RDtnQkFDNUQsSUFBSSxFQUFFO29CQUNKLEtBQUssRUFBRSxrQkFBa0I7aUJBQzFCO2dCQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7WUFaMEIsVUFBVTtZQUFFLFNBQVM7OztvQkFlN0MsS0FBSztzQkFDTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFByZXR0eUNoZWNrYm94Q29sb3IgfSBmcm9tICcuLi8uLi9tb2RlbC9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgZ2V0Q29sb3JDbGFzc05hbWUgfSBmcm9tICcuLi8uLi91dGlsaXR5JztcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25neC1wLWhvdmVyW3dpbGwtY2hhbmdlXSwgcC1ob3Zlclt3aWxsLWNoYW5nZV0nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9uZ3gtcHJldHR5LWhvdmVyLXdpbGwtY2hhbmdlLmNvbXBvbmVudC5odG1sJyxcclxuICBob3N0OiB7XHJcbiAgICBjbGFzczogYHN0YXRlIHAtaXMtaG92ZXJgXHJcbiAgfSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4UHJldHR5SG92ZXJXaWxsQ2hhbmdlQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuXHJcbiAgQElucHV0KCkgY29sb3I6IFByZXR0eUNoZWNrYm94Q29sb3I7XHJcbiAgQElucHV0KCkgb3V0bGluZSA9IGZhbHNlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXHJcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjJcclxuICApIHsgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICBpZiAoY2hhbmdlcy5jb2xvciB8fCBjaGFuZ2VzLm91dGxpbmUpIHtcclxuXHJcbiAgICAgIGNvbnN0IG9sZENsYXNzID1cclxuICAgICAgICBnZXRDb2xvckNsYXNzTmFtZShcclxuICAgICAgICAgIGNoYW5nZXMuY29sb3IgPyBjaGFuZ2VzLmNvbG9yLnByZXZpb3VzVmFsdWUgOiB0aGlzLmNvbG9yLFxyXG4gICAgICAgICAgY2hhbmdlcy5vdXRsaW5lID8gY2hhbmdlcy5vdXRsaW5lLnByZXZpb3VzVmFsdWUgOiBudWxsXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnN0IG5ld0NsYXNzID1cclxuICAgICAgICBnZXRDb2xvckNsYXNzTmFtZShcclxuICAgICAgICAgIGNoYW5nZXMuY29sb3IgPyBjaGFuZ2VzLmNvbG9yLmN1cnJlbnRWYWx1ZSA6IHRoaXMuY29sb3IsXHJcbiAgICAgICAgICBjaGFuZ2VzLm91dGxpbmUgPyBjaGFuZ2VzLm91dGxpbmUuY3VycmVudFZhbHVlIDogbnVsbFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgb2xkQ2xhc3MpO1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgbmV3Q2xhc3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIl19
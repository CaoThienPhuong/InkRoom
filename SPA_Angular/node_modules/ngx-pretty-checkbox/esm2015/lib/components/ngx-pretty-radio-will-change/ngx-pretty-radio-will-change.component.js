import { Component, ContentChild, ContentChildren, EventEmitter, Input, Output, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, Optional } from '@angular/core';
import { PrettyCheckboxAnimation, PrettyCheckboxShape, PrettyCheckboxStroke, } from '../../model/interfaces';
import { NgxPrettyRadioGroupDirective } from '../../directives/ngx-pretty-radio-group.directive';
import { NgxPrettyHoverWillChangeComponent } from '../ngx-pretty-hover-will-change/ngx-pretty-hover-will-change.component';
import { NgxPrettyToggleWillChangeComponent } from '../ngx-pretty-toggle-will-change/ngx-pretty-toggle-will-change.component';
import { NgxPrettyIconDirective } from '../../directives/ngx-pretty-icon.directive';
import { NgxPrettyImageDirective } from '../../directives/ngx-pretty-image.directive';
import { NgxPrettySvgDirective } from '../../directives/ngx-pretty-svg.directive';
import { NgxPrettyHoverComponent } from '../ngx-pretty-hover/ngx-pretty-hover.component';
import { NgxPrettyToggleComponent } from '../ngx-pretty-toggle/ngx-pretty-toggle.component';
export class NgxPrettyRadioWillChangeComponent {
    constructor(radioGroup) {
        this.radioGroup = radioGroup;
        this.change = new EventEmitter();
        this.outline = false; // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).
        this.checked = false;
        this.disabled = false;
        // ----- INPUTS AND BINDING ------
        this.isSwitch = false;
        this.lock = false;
        this.bigger = false;
        this.enableFocus = false;
        this.plain = false; // To remove the border ( when checkbox is checked )
        if (radioGroup) {
            this.radioGroupName = radioGroup.name;
        }
    }
    // ---------- STROKE ----------
    get _isFill() { return this.stroke === PrettyCheckboxStroke.Fill; }
    get _isSlim() { return this.stroke === PrettyCheckboxStroke.Slim; }
    get _isThick() { return this.stroke === PrettyCheckboxStroke.Thick; }
    // ---------- SHAPE ----------
    get _isCurve() { return this.shape === PrettyCheckboxShape.Curve; }
    get _isRound() { return this.shape === PrettyCheckboxShape.Round; }
    // ---------- ANIMATION ----------
    get _isSmooth() { return this.animation === PrettyCheckboxAnimation.Smooth; }
    get _isJelly() { return this.animation === PrettyCheckboxAnimation.Jelly; }
    get _isTada() { return this.animation === PrettyCheckboxAnimation.Tada; }
    get _isRotate() { return this.animation === PrettyCheckboxAnimation.Rotate; }
    get _isPulse() { return this.animation === PrettyCheckboxAnimation.Pulse; }
    get _isToggle() { return this._toggleComp.length === 2 || this._toggleWillChangeComp.length === 2; }
    // DEFAULT
    get _isDefault() { return !this.isSwitch && !this._iconElem && !this._svgElem && !this._imageElem; }
    get _isHover() { return this._hoverComp || this._hoverWillChangeDir; }
    // ---------- METHODS ---------
    _onChange(event, checked, value) {
        // I stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        event.stopPropagation();
        this.change.emit({ value, checked, event });
        if (this.radioGroup) {
            this.radioGroup._emitChange({ value, checked, event });
        }
    }
}
NgxPrettyRadioWillChangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-pretty-radio[will-change], p-radio[will-change]',
                template: "<input\r\n  #inputElem\r\n  type=\"radio\"\r\n  [name]=\"name || radioGroupName\"\r\n  [value]=\"value\"\r\n  [checked]=\"checked\"\r\n  [disabled]=\"disabled\"\r\n  (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n<div *ngIf=\"!_isToggle\" class=\"state\"\r\n    [ngClass]=\"[ color ? 'p-' + color + (outline ? '-o' : '') : '' ]\">\r\n\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n</div>\r\n\r\n<ng-content select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': 'pretty',
                    '[class.p-switch]': 'isSwitch',
                    '[class.p-locked]': 'lock',
                    '[class.p-bigger]': 'bigger',
                    '[class.p-has-focus]': 'enableFocus',
                    '[class.p-plain]': 'plain',
                    '[class.p-fill]': '_isFill',
                    '[class.p-thick]': '_isSlim',
                    '[class.p-slim]': '_isThick',
                    '[class.p-curve]': '_isCurve',
                    '[class.p-round]': '_isRound',
                    '[class.p-smooth]': '_isSmooth',
                    '[class.p-jelly]': '_isJelly',
                    '[class.p-tada]': '_isTada',
                    '[class.p-rotate]': '_isRotate',
                    '[class.p-pulse]': '_isPulse',
                    '[class.p-toggle]': '_isToggle',
                    '[class.p-default]': '_isDefault',
                    '[class.p-icon]': '_iconElem',
                    '[class.p-svg]': '_svgElem',
                    '[class.p-image]': '_imageElem',
                    '[class.p-has-hover]': '_isHover',
                },
                exportAs: 'ngxPrettyRadio'
            },] }
];
NgxPrettyRadioWillChangeComponent.ctorParameters = () => [
    { type: NgxPrettyRadioGroupDirective, decorators: [{ type: Optional }] }
];
NgxPrettyRadioWillChangeComponent.propDecorators = {
    _inputElem: [{ type: ViewChild, args: ['inputElem', { static: true },] }],
    change: [{ type: Output }],
    stroke: [{ type: Input }],
    shape: [{ type: Input }],
    animation: [{ type: Input }],
    color: [{ type: Input }],
    outline: [{ type: Input }],
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    value: [{ type: Input }],
    name: [{ type: Input }],
    isSwitch: [{ type: Input }],
    lock: [{ type: Input }],
    bigger: [{ type: Input }],
    enableFocus: [{ type: Input }],
    plain: [{ type: Input }],
    _toggleComp: [{ type: ContentChildren, args: [NgxPrettyToggleComponent,] }],
    _toggleWillChangeComp: [{ type: ContentChildren, args: [NgxPrettyToggleWillChangeComponent,] }],
    _iconElem: [{ type: ContentChild, args: [NgxPrettyIconDirective, { static: false },] }],
    _svgElem: [{ type: ContentChild, args: [NgxPrettySvgDirective, { static: false },] }],
    _imageElem: [{ type: ContentChild, args: [NgxPrettyImageDirective, { static: false },] }],
    _hoverWillChangeDir: [{ type: ContentChild, args: [NgxPrettyHoverWillChangeComponent, { static: false },] }],
    _hoverComp: [{ type: ContentChild, args: [NgxPrettyHoverComponent, { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,
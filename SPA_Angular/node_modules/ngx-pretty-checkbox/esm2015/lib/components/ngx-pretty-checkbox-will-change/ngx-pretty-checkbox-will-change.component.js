import { Component, ContentChild, ContentChildren, EventEmitter, Input, Output, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { PrettyCheckboxAnimation, PrettyCheckboxShape, PrettyCheckboxStroke, } from '../../model/interfaces';
import { NgxPrettyToggleComponent } from '../ngx-pretty-toggle/ngx-pretty-toggle.component';
import { NgxPrettyToggleWillChangeComponent } from '../ngx-pretty-toggle-will-change/ngx-pretty-toggle-will-change.component';
import { NgxPrettyIconDirective } from '../../directives/ngx-pretty-icon.directive';
import { NgxPrettySvgDirective } from '../../directives/ngx-pretty-svg.directive';
import { NgxPrettyImageDirective } from '../../directives/ngx-pretty-image.directive';
import { NgxPrettyHoverWillChangeComponent } from '../ngx-pretty-hover-will-change/ngx-pretty-hover-will-change.component';
import { NgxPrettyHoverComponent } from '../ngx-pretty-hover/ngx-pretty-hover.component';
import { NgxPrettyIndeterminateComponent } from '../ngx-pretty-Indeterminate/ngx-pretty-Indeterminate.component';
import { NgxPrettyIndeterminateWillChangeComponent } from '../ngx-pretty-Indeterminate-will-change/ngx-pretty-Indeterminate-will-change.component';
export class NgxPrettyCheckboxWillChangeComponent {
    constructor(cd) {
        this.cd = cd;
        this.change = new EventEmitter();
        this.outline = false; // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).
        this.checked = false;
        this.disabled = false;
        // ----- INPUTS AND BINDING ------
        this.isSwitch = false;
        this.lock = false;
        this.bigger = false;
        this.enableFocus = false;
        this.plain = false; // To remove the border ( when checkbox is checked )
    }
    // ---------- STROKE ----------
    get _isFill() { return this.stroke === PrettyCheckboxStroke.Fill; }
    get _isSlim() { return this.stroke === PrettyCheckboxStroke.Slim; }
    get _isThick() { return this.stroke === PrettyCheckboxStroke.Thick; }
    // ---------- SHAPE ----------
    get _isCurve() { return this.shape === PrettyCheckboxShape.Curve; }
    get _isRound() { return this.shape === PrettyCheckboxShape.Round; }
    // ---------- ANIMATION ----------
    get _isSmooth() { return this.animation === PrettyCheckboxAnimation.Smooth; }
    get _isJelly() { return this.animation === PrettyCheckboxAnimation.Jelly; }
    get _isTada() { return this.animation === PrettyCheckboxAnimation.Tada; }
    get _isRotate() { return this.animation === PrettyCheckboxAnimation.Rotate; }
    get _isPulse() { return this.animation === PrettyCheckboxAnimation.Pulse; }
    get _isToggle() { return this._toggleComp.length === 2 || this._toggleWillChangeComp.length === 2; }
    // DEFAULT
    get _isDefault() { return !this.isSwitch && !this._iconElem && !this._svgElem && !this._imageElem; }
    get _isHover() { return this._hoverComp || this._hoverWillChangeDir; }
    get _isIndeterminate() { return this._indeterminateComp || this._indeterminateWillChangeComp; }
    // ---------- PRIVATE METHODS ---------
    _onChange(event, checked, value) {
        // I stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up
        event.stopPropagation();
        this.checked = checked;
        this.change.emit({ value, checked, event });
    }
    // ---------- PUBLIC METHODS ---------
    setIndeterminate(value = true) {
        this._inputElem.nativeElement.indeterminate = value;
    }
    forceCheck(check) {
        this.checked = check;
        this.cd.markForCheck();
    }
}
NgxPrettyCheckboxWillChangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-pretty-checkbox[will-change], p-checkbox[will-change]',
                template: "<input\r\n  #inputElem\r\n  type=\"checkbox\"\r\n  [value]=\"value\"\r\n  [checked]=\"checked\"\r\n  [disabled]=\"disabled\"\r\n  (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n<div\r\n  *ngIf=\"!_isToggle\"\r\n  class=\"state\"\r\n  [ngClass]=\"[ color ? 'p-' + color + (outline ? '-o' : '') : '' ]\">\r\n\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n\r\n    <label><ng-content></ng-content></label>\r\n\r\n</div>\r\n\r\n<ng-content\r\n  select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\">\r\n</ng-content>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': 'pretty',
                    '[class.p-switch]': 'isSwitch',
                    '[class.p-locked]': 'lock',
                    '[class.p-bigger]': 'bigger',
                    '[class.p-has-focus]': 'enableFocus',
                    '[class.p-plain]': 'plain',
                    '[class.p-fill]': '_isFill',
                    '[class.p-slim]': '_isSlim',
                    '[class.p-thick]': '_isThick',
                    '[class.p-curve]': '_isCurve',
                    '[class.p-round]': '_isRound',
                    '[class.p-smooth]': '_isSmooth',
                    '[class.p-jelly]': '_isJelly',
                    '[class.p-tada]': '_isTada',
                    '[class.p-rotate]': '_isRotate',
                    '[class.p-pulse]': '_isPulse',
                    '[class.p-toggle]': '_isToggle',
                    '[class.p-default]': '_isDefault',
                    '[class.p-icon]': '_iconElem',
                    '[class.p-svg]': '_svgElem',
                    '[class.p-image]': '_imageElem',
                    '[class.p-has-hover]': '_isHover',
                    '[class.p-has-indeterminate]': '_isIndeterminate',
                },
                exportAs: 'ngxPrettyCheckboxWillChange'
            },] }
];
NgxPrettyCheckboxWillChangeComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NgxPrettyCheckboxWillChangeComponent.propDecorators = {
    _inputElem: [{ type: ViewChild, args: ['inputElem', { static: true },] }],
    change: [{ type: Output }],
    stroke: [{ type: Input }],
    shape: [{ type: Input }],
    animation: [{ type: Input }],
    color: [{ type: Input }],
    outline: [{ type: Input }],
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    value: [{ type: Input }],
    isSwitch: [{ type: Input }],
    lock: [{ type: Input }],
    bigger: [{ type: Input }],
    enableFocus: [{ type: Input }],
    plain: [{ type: Input }],
    _toggleComp: [{ type: ContentChildren, args: [NgxPrettyToggleComponent,] }],
    _toggleWillChangeComp: [{ type: ContentChildren, args: [NgxPrettyToggleWillChangeComponent,] }],
    _iconElem: [{ type: ContentChild, args: [NgxPrettyIconDirective, { static: false },] }],
    _svgElem: [{ type: ContentChild, args: [NgxPrettySvgDirective, { static: false },] }],
    _imageElem: [{ type: ContentChild, args: [NgxPrettyImageDirective, { static: false },] }],
    _hoverWillChangeDir: [{ type: ContentChild, args: [NgxPrettyHoverWillChangeComponent, { static: false },] }],
    _hoverComp: [{ type: ContentChild, args: [NgxPrettyHoverComponent, { static: false },] }],
    _indeterminateComp: [{ type: ContentChild, args: [NgxPrettyIndeterminateComponent, { static: false },] }],
    _indeterminateWillChangeComp: [{ type: ContentChild, args: [NgxPrettyIndeterminateWillChangeComponent, { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS1jaGVja2JveC13aWxsLWNoYW5nZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcHJldHR5LWNoZWNrYm94L3NyYy9saWIvY29tcG9uZW50cy9uZ3gtcHJldHR5LWNoZWNrYm94LXdpbGwtY2hhbmdlL25neC1wcmV0dHktY2hlY2tib3gtd2lsbC1jaGFuZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLGVBQWUsRUFFZixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFFTixTQUFTLEVBQ1QsaUJBQWlCLEVBQ2pCLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDaEIsTUFBTSxlQUFlLENBQUM7QUFDekIsT0FBTyxFQUNMLHVCQUF1QixFQUd2QixtQkFBbUIsRUFDbkIsb0JBQW9CLEdBQ25CLE1BQU0sd0JBQXdCLENBQUM7QUFDbEMsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDNUYsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sMEVBQTBFLENBQUM7QUFDOUgsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDcEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDbEYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDdEYsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0sd0VBQXdFLENBQUM7QUFDM0gsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDekYsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sZ0VBQWdFLENBQUM7QUFDakgsT0FBTyxFQUFFLHlDQUF5QyxFQUFFLE1BQU0sd0ZBQXdGLENBQUM7QUFrQ25KLE1BQU0sT0FBTyxvQ0FB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RUFBRSxVQUFVO29CQUNqQyw2QkFBNkIsRUFBRSxrQkFBa0I7aUJBQ2xEO2dCQUNELFFBQVEsRUFBRSw2QkFBNkI7YUFDeEM7OztZQWxEQyxpQkFBaUI7Ozt5QkF1RGhCLFNBQVMsU0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO3FCQUN2QyxNQUFNO3FCQUlOLEtBQUs7b0JBQ0wsS0FBSzt3QkFDTCxLQUFLO29CQUNMLEtBQUs7c0JBQ0wsS0FBSztzQkFFTCxLQUFLO3VCQUNMLEtBQUs7b0JBQ0wsS0FBSzt1QkFJTCxLQUFLO21CQUNMLEtBQUs7cUJBQ0wsS0FBSzswQkFDTCxLQUFLO29CQUNMLEtBQUs7MEJBcUJMLGVBQWUsU0FBQyx3QkFBd0I7b0NBQ3hDLGVBQWUsU0FBQyxrQ0FBa0M7d0JBVWxELFlBQVksU0FBQyxzQkFBc0IsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUM7dUJBR3BELFlBQVksU0FBQyxxQkFBcUIsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUM7eUJBR25ELFlBQVksU0FBQyx1QkFBdUIsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUM7a0NBR3JELFlBQVksU0FBQyxpQ0FBaUMsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUM7eUJBQy9ELFlBQVksU0FBQyx1QkFBdUIsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUM7aUNBSXJELFlBQVksU0FBQywrQkFBK0IsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUM7MkNBQzdELFlBQVksU0FBQyx5Q0FBeUMsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBDb250ZW50Q2hpbGQsXHJcbiAgQ29udGVudENoaWxkcmVuLFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIElucHV0LFxyXG4gIE91dHB1dCxcclxuICBRdWVyeUxpc3QsXHJcbiAgVmlld0NoaWxkLFxyXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxyXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxyXG4gIENoYW5nZURldGVjdG9yUmVmXHJcbiAgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICBQcmV0dHlDaGVja2JveEFuaW1hdGlvbixcclxuICBQcmV0dHlDaGVja0JveENoYW5nZSxcclxuICBQcmV0dHlDaGVja2JveENvbG9yLFxyXG4gIFByZXR0eUNoZWNrYm94U2hhcGUsXHJcbiAgUHJldHR5Q2hlY2tib3hTdHJva2UsXHJcbiAgfSBmcm9tICcuLi8uLi9tb2RlbC9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgTmd4UHJldHR5VG9nZ2xlQ29tcG9uZW50IH0gZnJvbSAnLi4vbmd4LXByZXR0eS10b2dnbGUvbmd4LXByZXR0eS10b2dnbGUuY29tcG9uZW50JztcclxuaW1wb3J0IHsgTmd4UHJldHR5VG9nZ2xlV2lsbENoYW5nZUNvbXBvbmVudCB9IGZyb20gJy4uL25neC1wcmV0dHktdG9nZ2xlLXdpbGwtY2hhbmdlL25neC1wcmV0dHktdG9nZ2xlLXdpbGwtY2hhbmdlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE5neFByZXR0eUljb25EaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL25neC1wcmV0dHktaWNvbi5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBOZ3hQcmV0dHlTdmdEaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL25neC1wcmV0dHktc3ZnLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IE5neFByZXR0eUltYWdlRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9uZ3gtcHJldHR5LWltYWdlLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IE5neFByZXR0eUhvdmVyV2lsbENoYW5nZUNvbXBvbmVudCB9IGZyb20gJy4uL25neC1wcmV0dHktaG92ZXItd2lsbC1jaGFuZ2Uvbmd4LXByZXR0eS1ob3Zlci13aWxsLWNoYW5nZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBOZ3hQcmV0dHlIb3ZlckNvbXBvbmVudCB9IGZyb20gJy4uL25neC1wcmV0dHktaG92ZXIvbmd4LXByZXR0eS1ob3Zlci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBOZ3hQcmV0dHlJbmRldGVybWluYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vbmd4LXByZXR0eS1JbmRldGVybWluYXRlL25neC1wcmV0dHktSW5kZXRlcm1pbmF0ZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBOZ3hQcmV0dHlJbmRldGVybWluYXRlV2lsbENoYW5nZUNvbXBvbmVudCB9IGZyb20gJy4uL25neC1wcmV0dHktSW5kZXRlcm1pbmF0ZS13aWxsLWNoYW5nZS9uZ3gtcHJldHR5LUluZGV0ZXJtaW5hdGUtd2lsbC1jaGFuZ2UuY29tcG9uZW50JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbmd4LXByZXR0eS1jaGVja2JveFt3aWxsLWNoYW5nZV0sIHAtY2hlY2tib3hbd2lsbC1jaGFuZ2VdJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vbmd4LXByZXR0eS1jaGVja2JveC13aWxsLWNoYW5nZS5jb21wb25lbnQuaHRtbCcsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxuICBob3N0OiB7XHJcbiAgICAnY2xhc3MnOiAncHJldHR5JyxcclxuICAgICdbY2xhc3MucC1zd2l0Y2hdJzogJ2lzU3dpdGNoJyxcclxuICAgICdbY2xhc3MucC1sb2NrZWRdJzogJ2xvY2snLFxyXG4gICAgJ1tjbGFzcy5wLWJpZ2dlcl0nOiAnYmlnZ2VyJyxcclxuICAgICdbY2xhc3MucC1oYXMtZm9jdXNdJzogJ2VuYWJsZUZvY3VzJyxcclxuICAgICdbY2xhc3MucC1wbGFpbl0nOiAncGxhaW4nLFxyXG4gICAgJ1tjbGFzcy5wLWZpbGxdJzogJ19pc0ZpbGwnLFxyXG4gICAgJ1tjbGFzcy5wLXNsaW1dJzogJ19pc1NsaW0nLFxyXG4gICAgJ1tjbGFzcy5wLXRoaWNrXSc6ICdfaXNUaGljaycsXHJcbiAgICAnW2NsYXNzLnAtY3VydmVdJzogJ19pc0N1cnZlJyxcclxuICAgICdbY2xhc3MucC1yb3VuZF0nOiAnX2lzUm91bmQnLFxyXG4gICAgJ1tjbGFzcy5wLXNtb290aF0nOiAnX2lzU21vb3RoJyxcclxuICAgICdbY2xhc3MucC1qZWxseV0nOiAnX2lzSmVsbHknLFxyXG4gICAgJ1tjbGFzcy5wLXRhZGFdJzogJ19pc1RhZGEnLFxyXG4gICAgJ1tjbGFzcy5wLXJvdGF0ZV0nOiAnX2lzUm90YXRlJyxcclxuICAgICdbY2xhc3MucC1wdWxzZV0nOiAnX2lzUHVsc2UnLFxyXG4gICAgJ1tjbGFzcy5wLXRvZ2dsZV0nOiAnX2lzVG9nZ2xlJyxcclxuICAgICdbY2xhc3MucC1kZWZhdWx0XSc6ICdfaXNEZWZhdWx0JyxcclxuICAgICdbY2xhc3MucC1pY29uXSc6ICdfaWNvbkVsZW0nLFxyXG4gICAgJ1tjbGFzcy5wLXN2Z10nOiAnX3N2Z0VsZW0nLFxyXG4gICAgJ1tjbGFzcy5wLWltYWdlXSc6ICdfaW1hZ2VFbGVtJyxcclxuICAgICdbY2xhc3MucC1oYXMtaG92ZXJdJzogJ19pc0hvdmVyJyxcclxuICAgICdbY2xhc3MucC1oYXMtaW5kZXRlcm1pbmF0ZV0nOiAnX2lzSW5kZXRlcm1pbmF0ZScsXHJcbiAgfSxcclxuICBleHBvcnRBczogJ25neFByZXR0eUNoZWNrYm94V2lsbENoYW5nZSdcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neFByZXR0eUNoZWNrYm94V2lsbENoYW5nZUNvbXBvbmVudCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7fVxyXG5cclxuICBAVmlld0NoaWxkKCdpbnB1dEVsZW0nLCB7IHN0YXRpYzogdHJ1ZSB9KSBwcml2YXRlIF9pbnB1dEVsZW06IEVsZW1lbnRSZWY7XHJcbiAgQE91dHB1dCgpIGNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8UHJldHR5Q2hlY2tCb3hDaGFuZ2U+KCk7XHJcblxyXG5cclxuICAvLyAtLS0tLS0tLS0tIElOUFVUUyAtLS0tLS0tLS0tXHJcbiAgQElucHV0KCkgc3Ryb2tlOiBQcmV0dHlDaGVja2JveFN0cm9rZTtcclxuICBASW5wdXQoKSBzaGFwZTogUHJldHR5Q2hlY2tib3hTaGFwZTtcclxuICBASW5wdXQoKSBhbmltYXRpb246IFByZXR0eUNoZWNrYm94QW5pbWF0aW9uO1xyXG4gIEBJbnB1dCgpIGNvbG9yOiBQcmV0dHlDaGVja2JveENvbG9yO1xyXG4gIEBJbnB1dCgpIG91dGxpbmUgPSBmYWxzZTsgLy8gQ09MT1IgLiBDYW4gYmUgdXNlZCBhcyBTb2xpZCAoIHAtcHJpbWFyeSApIG9yIE91dGxpbmUgKCBwLXByaW1hcnktbyApLlxyXG5cclxuICBASW5wdXQoKSBjaGVja2VkID0gZmFsc2U7XHJcbiAgQElucHV0KCkgZGlzYWJsZWQgPSBmYWxzZTtcclxuICBASW5wdXQoKSB2YWx1ZTogYW55O1xyXG5cclxuXHJcbiAgLy8gLS0tLS0gSU5QVVRTIEFORCBCSU5ESU5HIC0tLS0tLVxyXG4gIEBJbnB1dCgpIGlzU3dpdGNoID0gZmFsc2U7XHJcbiAgQElucHV0KCkgbG9jayA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIGJpZ2dlciA9IGZhbHNlO1xyXG4gIEBJbnB1dCgpIGVuYWJsZUZvY3VzID0gZmFsc2U7XHJcbiAgQElucHV0KCkgcGxhaW4gPSBmYWxzZTsgLy8gVG8gcmVtb3ZlIHRoZSBib3JkZXIgKCB3aGVuIGNoZWNrYm94IGlzIGNoZWNrZWQgKVxyXG5cclxuXHJcbiAgLy8gLS0tLS0tLS0tLSBTVFJPS0UgLS0tLS0tLS0tLVxyXG4gIGdldCBfaXNGaWxsKCkgeyByZXR1cm4gdGhpcy5zdHJva2UgPT09IFByZXR0eUNoZWNrYm94U3Ryb2tlLkZpbGw7IH1cclxuICBnZXQgX2lzU2xpbSgpIHsgcmV0dXJuIHRoaXMuc3Ryb2tlID09PSBQcmV0dHlDaGVja2JveFN0cm9rZS5TbGltOyB9XHJcbiAgZ2V0IF9pc1RoaWNrKCkgeyByZXR1cm4gdGhpcy5zdHJva2UgPT09IFByZXR0eUNoZWNrYm94U3Ryb2tlLlRoaWNrOyB9XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0gU0hBUEUgLS0tLS0tLS0tLVxyXG4gIGdldCBfaXNDdXJ2ZSgpIHsgcmV0dXJuIHRoaXMuc2hhcGUgPT09IFByZXR0eUNoZWNrYm94U2hhcGUuQ3VydmU7IH1cclxuICBnZXQgX2lzUm91bmQoKSB7IHJldHVybiB0aGlzLnNoYXBlID09PSBQcmV0dHlDaGVja2JveFNoYXBlLlJvdW5kOyB9XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0gQU5JTUFUSU9OIC0tLS0tLS0tLS1cclxuICBnZXQgX2lzU21vb3RoKCkgeyByZXR1cm4gdGhpcy5hbmltYXRpb24gPT09IFByZXR0eUNoZWNrYm94QW5pbWF0aW9uLlNtb290aDsgfVxyXG4gIGdldCBfaXNKZWxseSgpIHsgcmV0dXJuIHRoaXMuYW5pbWF0aW9uID09PSBQcmV0dHlDaGVja2JveEFuaW1hdGlvbi5KZWxseTsgfVxyXG4gIGdldCBfaXNUYWRhKCkgeyByZXR1cm4gdGhpcy5hbmltYXRpb24gPT09IFByZXR0eUNoZWNrYm94QW5pbWF0aW9uLlRhZGE7IH1cclxuICBnZXQgX2lzUm90YXRlKCkgeyByZXR1cm4gdGhpcy5hbmltYXRpb24gPT09IFByZXR0eUNoZWNrYm94QW5pbWF0aW9uLlJvdGF0ZTsgfVxyXG4gIGdldCBfaXNQdWxzZSgpIHsgcmV0dXJuIHRoaXMuYW5pbWF0aW9uID09PSBQcmV0dHlDaGVja2JveEFuaW1hdGlvbi5QdWxzZTsgfVxyXG5cclxuICAvLyAtLS0tLS0tLS0tIEJJTkRJTkcgLS0tLS0tLS0tLVxyXG4gIC8vIFRvZ2dsZVxyXG4gIEBDb250ZW50Q2hpbGRyZW4oTmd4UHJldHR5VG9nZ2xlQ29tcG9uZW50KSBfdG9nZ2xlQ29tcDogUXVlcnlMaXN0PE5neFByZXR0eVRvZ2dsZUNvbXBvbmVudD47XHJcbiAgQENvbnRlbnRDaGlsZHJlbihOZ3hQcmV0dHlUb2dnbGVXaWxsQ2hhbmdlQ29tcG9uZW50KSBfdG9nZ2xlV2lsbENoYW5nZUNvbXA6IFF1ZXJ5TGlzdDxOZ3hQcmV0dHlUb2dnbGVXaWxsQ2hhbmdlQ29tcG9uZW50PjtcclxuICBnZXQgX2lzVG9nZ2xlKCkgeyByZXR1cm4gdGhpcy5fdG9nZ2xlQ29tcC5sZW5ndGggPT09IDIgfHwgdGhpcy5fdG9nZ2xlV2lsbENoYW5nZUNvbXAubGVuZ3RoID09PSAyOyB9XHJcblxyXG4gIC8vIERFRkFVTFRcclxuICBnZXQgX2lzRGVmYXVsdCgpIHsgcmV0dXJuICF0aGlzLmlzU3dpdGNoICYmICF0aGlzLl9pY29uRWxlbSAmJiAhdGhpcy5fc3ZnRWxlbSAmJiAhdGhpcy5faW1hZ2VFbGVtOyB9XHJcblxyXG5cclxuXHJcbiAgLy8gLS0tLS0gQ0hJTEQgU0VMRUNUT1IgQU5EIEJJTkRJTkcgLS0tLS1cclxuICAvLyBJQ09OXHJcbiAgQENvbnRlbnRDaGlsZChOZ3hQcmV0dHlJY29uRGlyZWN0aXZlLCB7c3RhdGljOiBmYWxzZX0pIF9pY29uRWxlbTogTmd4UHJldHR5SWNvbkRpcmVjdGl2ZTtcclxuXHJcbiAgLy8gU1ZHXHJcbiAgQENvbnRlbnRDaGlsZChOZ3hQcmV0dHlTdmdEaXJlY3RpdmUsIHtzdGF0aWM6IGZhbHNlfSkgX3N2Z0VsZW06IE5neFByZXR0eVN2Z0RpcmVjdGl2ZTtcclxuXHJcbiAgLy8gSU1BR0VcclxuICBAQ29udGVudENoaWxkKE5neFByZXR0eUltYWdlRGlyZWN0aXZlLCB7c3RhdGljOiBmYWxzZX0pIF9pbWFnZUVsZW06IE5neFByZXR0eUltYWdlRGlyZWN0aXZlO1xyXG5cclxuICAvLyBIT1ZFUlxyXG4gIEBDb250ZW50Q2hpbGQoTmd4UHJldHR5SG92ZXJXaWxsQ2hhbmdlQ29tcG9uZW50LCB7c3RhdGljOiBmYWxzZX0pIF9ob3ZlcldpbGxDaGFuZ2VEaXI6IE5neFByZXR0eUhvdmVyV2lsbENoYW5nZUNvbXBvbmVudDtcclxuICBAQ29udGVudENoaWxkKE5neFByZXR0eUhvdmVyQ29tcG9uZW50LCB7c3RhdGljOiBmYWxzZX0pIF9ob3ZlckNvbXA6IE5neFByZXR0eUhvdmVyQ29tcG9uZW50O1xyXG4gIGdldCBfaXNIb3ZlcigpIHsgcmV0dXJuIHRoaXMuX2hvdmVyQ29tcCB8fCB0aGlzLl9ob3ZlcldpbGxDaGFuZ2VEaXI7IH1cclxuXHJcbiAgLy8gSW5kZXRlcm1pbmF0ZVxyXG4gIEBDb250ZW50Q2hpbGQoTmd4UHJldHR5SW5kZXRlcm1pbmF0ZUNvbXBvbmVudCwge3N0YXRpYzogZmFsc2V9KSBfaW5kZXRlcm1pbmF0ZUNvbXA6IE5neFByZXR0eUluZGV0ZXJtaW5hdGVDb21wb25lbnQ7XHJcbiAgQENvbnRlbnRDaGlsZChOZ3hQcmV0dHlJbmRldGVybWluYXRlV2lsbENoYW5nZUNvbXBvbmVudCwge3N0YXRpYzogZmFsc2V9KSBfaW5kZXRlcm1pbmF0ZVdpbGxDaGFuZ2VDb21wOiBOZ3hQcmV0dHlJbmRldGVybWluYXRlV2lsbENoYW5nZUNvbXBvbmVudDtcclxuICBnZXQgX2lzSW5kZXRlcm1pbmF0ZSgpIHsgcmV0dXJuIHRoaXMuX2luZGV0ZXJtaW5hdGVDb21wIHx8IHRoaXMuX2luZGV0ZXJtaW5hdGVXaWxsQ2hhbmdlQ29tcDsgfVxyXG5cclxuXHJcbiAgLy8gLS0tLS0tLS0tLSBQUklWQVRFIE1FVEhPRFMgLS0tLS0tLS0tXHJcbiAgcHVibGljIF9vbkNoYW5nZShldmVudDogRXZlbnQsIGNoZWNrZWQ6IGJvb2xlYW4sIHZhbHVlOiBzdHJpbmcpIHtcclxuICAgIC8vIEkgc3RvcCBwcm9wYWdhdGlvbiBvbiB0aGUgY2hhbmdlIGV2ZW50LlxyXG4gICAgLy8gT3RoZXJ3aXNlIHRoZSBjaGFuZ2UgZXZlbnQsIGZyb20gdGhlIGlucHV0IGVsZW1lbnQsIHdpbGwgYnViYmxlIHVwXHJcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIHRoaXMuY2hlY2tlZCA9IGNoZWNrZWQ7XHJcbiAgICB0aGlzLmNoYW5nZS5lbWl0KHsgdmFsdWUsIGNoZWNrZWQsIGV2ZW50IH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gLS0tLS0tLS0tLSBQVUJMSUMgTUVUSE9EUyAtLS0tLS0tLS1cclxuICBwdWJsaWMgc2V0SW5kZXRlcm1pbmF0ZSh2YWx1ZSA9IHRydWUpIHtcclxuICAgIHRoaXMuX2lucHV0RWxlbS5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBmb3JjZUNoZWNrKGNoZWNrOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLmNoZWNrZWQgPSBjaGVjaztcclxuICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuIl19
// tslint:disable:use-host-property-decorator
import { ElementRef, Component, Renderer2, ChangeDetectionStrategy, Attribute } from '@angular/core';
import { PrettyCheckboxColor, PrettyCheckBoxToggleType } from '../../model/interfaces';
export class NgxPrettyToggleComponent {
    constructor(el, renderer, _outline = false, _color, _type) {
        this.el = el;
        this.renderer = renderer;
        this._outline = _outline;
        this._color = _color;
        this._type = _type;
    }
    ngAfterViewInit() {
        if (this._color) {
            this.renderer.addClass(this.el.nativeElement, `p-${this._color}${this._outline ? '-o' : ''}`);
        }
        this.renderer.addClass(this.el.nativeElement, `p-${this._type}`);
    }
}
NgxPrettyToggleComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-p-toggle:not([will-change]), p-toggle:not([will-change])',
                template: "<ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n\r\n<label><ng-content></ng-content></label>",
                host: {
                    class: 'state'
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
NgxPrettyToggleComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Attribute, args: ['outline',] }] },
    { type: PrettyCheckboxColor, decorators: [{ type: Attribute, args: ['color',] }] },
    { type: PrettyCheckBoxToggleType, decorators: [{ type: Attribute, args: ['type',] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS10b2dnbGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXByZXR0eS1jaGVja2JveC9zcmMvbGliL2NvbXBvbmVudHMvbmd4LXByZXR0eS10b2dnbGUvbmd4LXByZXR0eS10b2dnbGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZDQUE2QztBQUU3QyxPQUFPLEVBQVMsVUFBVSxFQUFFLFNBQVMsRUFBaUIsU0FBUyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzSCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQVV2RixNQUFNLE9BQU8sd0JBQXdCO0lBRW5DLFlBQ1UsRUFBYyxFQUNkLFFBQW1CLEVBQ0csV0FBVyxLQUFLLEVBQ2hCLE1BQTJCLEVBQzVCLEtBQStCO1FBSnBELE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ0csYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUNoQixXQUFNLEdBQU4sTUFBTSxDQUFxQjtRQUM1QixVQUFLLEdBQUwsS0FBSyxDQUEwQjtJQUMxRCxDQUFDO0lBRUwsZUFBZTtRQUNiLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUMxQyxLQUFLLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDL0MsQ0FBQztTQUNIO1FBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsS0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNuRSxDQUFDOzs7WUExQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSw4REFBOEQ7Z0JBQ3hFLHdKQUFpRDtnQkFDakQsSUFBSSxFQUFFO29CQUNKLEtBQUssRUFBRSxPQUFPO2lCQUNmO2dCQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7WUFWZSxVQUFVO1lBQTRCLFNBQVM7NENBZ0IxRCxTQUFTLFNBQUMsU0FBUztZQWZmLG1CQUFtQix1QkFnQnZCLFNBQVMsU0FBQyxPQUFPO1lBaEJRLHdCQUF3Qix1QkFpQmpELFNBQVMsU0FBQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6dXNlLWhvc3QtcHJvcGVydHktZGVjb3JhdG9yXHJcblxyXG5pbXBvcnQgeyBJbnB1dCwgRWxlbWVudFJlZiwgQ29tcG9uZW50LCBBZnRlclZpZXdJbml0LCBSZW5kZXJlcjIsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBBdHRyaWJ1dGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUHJldHR5Q2hlY2tib3hDb2xvciwgUHJldHR5Q2hlY2tCb3hUb2dnbGVUeXBlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaW50ZXJmYWNlcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25neC1wLXRvZ2dsZTpub3QoW3dpbGwtY2hhbmdlXSksIHAtdG9nZ2xlOm5vdChbd2lsbC1jaGFuZ2VdKScsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL25neC1wcmV0dHktdG9nZ2xlLmNvbXBvbmVudC5odG1sJyxcclxuICBob3N0OiB7XHJcbiAgICBjbGFzczogJ3N0YXRlJ1xyXG4gIH0sXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neFByZXR0eVRvZ2dsZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXHJcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXHJcbiAgICBAQXR0cmlidXRlKCdvdXRsaW5lJykgcHJpdmF0ZSBfb3V0bGluZSA9IGZhbHNlLFxyXG4gICAgQEF0dHJpYnV0ZSgnY29sb3InKSAgIHByaXZhdGUgX2NvbG9yOiBQcmV0dHlDaGVja2JveENvbG9yLFxyXG4gICAgQEF0dHJpYnV0ZSgndHlwZScpICAgcHJpdmF0ZSBfdHlwZTogUHJldHR5Q2hlY2tCb3hUb2dnbGVUeXBlLFxyXG4gICkgeyB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIGlmICh0aGlzLl9jb2xvcikge1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCxcclxuICAgICAgICBgcC0ke3RoaXMuX2NvbG9yfSR7dGhpcy5fb3V0bGluZSA/ICctbycgOiAnJ31gXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIGBwLSR7dGhpcy5fdHlwZX1gKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==
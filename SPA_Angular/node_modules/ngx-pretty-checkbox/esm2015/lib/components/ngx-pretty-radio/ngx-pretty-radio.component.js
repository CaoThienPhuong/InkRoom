import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, Input, Output, ViewChild, ViewEncapsulation, Attribute, Renderer2, Optional, } from '@angular/core';
import { PrettyCheckboxAnimation, PrettyCheckboxColor, PrettyCheckboxShape, PrettyCheckboxStroke } from '../../model/interfaces';
import { strToBoolean } from '../../utility';
import { NgxPrettyIconDirective } from '../../directives/ngx-pretty-icon.directive';
import { NgxPrettyImageDirective } from '../../directives/ngx-pretty-image.directive';
import { NgxPrettyRadioGroupDirective } from '../../directives/ngx-pretty-radio-group.directive';
import { NgxPrettySvgDirective } from '../../directives/ngx-pretty-svg.directive';
import { NgxPrettyHoverWillChangeComponent } from '../ngx-pretty-hover-will-change/ngx-pretty-hover-will-change.component';
import { NgxPrettyHoverComponent } from '../ngx-pretty-hover/ngx-pretty-hover.component';
import { NgxPrettyToggleWillChangeComponent } from '../ngx-pretty-toggle-will-change/ngx-pretty-toggle-will-change.component';
import { NgxPrettyToggleComponent } from '../ngx-pretty-toggle/ngx-pretty-toggle.component';
export class NgxPrettyRadioComponent {
    constructor(renderer, el, radioGroup, _stroke, _shape, _animation, _isSwitch = false, _bigger = false, _enableFocus = false, _plain = false, _outline = false, _color, _name) {
        this.renderer = renderer;
        this.el = el;
        this.radioGroup = radioGroup;
        this._stroke = _stroke;
        this._shape = _shape;
        this._animation = _animation;
        this._isSwitch = _isSwitch;
        this._bigger = _bigger;
        this._enableFocus = _enableFocus;
        this._plain = _plain;
        this._outline = _outline;
        this._color = _color;
        this._name = _name;
        this.checked = false;
        this.disabled = false;
        this.lock = false;
        this.change = new EventEmitter();
        if (!this._name && this.radioGroup) {
            this._name = this.radioGroup.name;
        }
        this._isSwitch = strToBoolean(this._isSwitch);
        this._bigger = strToBoolean(this._bigger);
        this._enableFocus = strToBoolean(this._enableFocus);
        this._plain = strToBoolean(this._plain);
        this._outline = strToBoolean(this._outline);
    }
    ngAfterViewInit() {
        const el = this.el.nativeElement;
        if (this._isSwitch) {
            this.renderer.addClass(el, `p-switch`);
        }
        if (this._bigger) {
            this.renderer.addClass(el, `p-bigger`);
        }
        if (this._enableFocus) {
            this.renderer.addClass(el, `p-has-focus`);
        }
        if (this._plain) {
            this.renderer.addClass(el, `p-plain`);
        }
        if (this._stroke) {
            this.renderer.addClass(el, `p-${this._stroke}`);
        }
        if (this._shape) {
            this.renderer.addClass(el, `p-${this._shape}`);
        }
        if (this._animation) {
            this.renderer.addClass(el, `p-${this._animation}`);
        }
        if (this._iconDir) {
            this.renderer.addClass(el, `p-icon`);
        }
        if (this._svgDir) {
            this.renderer.addClass(el, `p-svg`);
        }
        if (this._imgDir) {
            this.renderer.addClass(el, `p-image`);
        }
        if (this._hoverDir || this._hoverWillChangeDir) {
            this.renderer.addClass(el, `p-has-hover`);
        }
        if (this._isToggle) {
            this.renderer.addClass(el, `p-toggle`);
        }
        if (!this._isSwitch && !this._iconDir && !this._svgDir && !this._imgDir) {
            this.renderer.addClass(el, `p-default`);
        }
        // STATE ELEM
        if (this._color && !this._isToggle) {
            this.renderer.addClass(this._stateElem.nativeElement, `p-${this._color}${this._outline ? '-o' : ''}`);
        }
    }
    // ---------- METHODS ---------
    _onChange(event, checked, value) {
        // I stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        event.stopPropagation();
        this.change.emit({ value, checked, event });
        if (this.radioGroup) {
            this.radioGroup._emitChange({ value, checked, event });
        }
    }
    get _isToggle() { return this._toggleComps.length === 2 || this._toggleWillChangeComps.length === 2; }
}
NgxPrettyRadioComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-pretty-radio:not([will-change]), p-radio:not([will-change])',
                template: "<input\r\n  #inputElem\r\n  type=\"radio\"\r\n  [name]=\"_name\"\r\n  [value]=\"value\"\r\n  [checked]=\"checked\"\r\n  [disabled]=\"disabled\"\r\n  (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n<div #stateElem *ngIf=\"!_isToggle\" class=\"state\">\r\n\r\n  <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n  <label><ng-content></ng-content></label>\r\n\r\n</div>\r\n\r\n<ng-content select=\"ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>",
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': 'pretty',
                    '[class.p-locked]': 'lock'
                },
                exportAs: 'ngxPrettyRadio'
            },] }
];
NgxPrettyRadioComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgxPrettyRadioGroupDirective, decorators: [{ type: Optional }] },
    { type: PrettyCheckboxStroke, decorators: [{ type: Attribute, args: ['stroke',] }] },
    { type: PrettyCheckboxShape, decorators: [{ type: Attribute, args: ['shape',] }] },
    { type: PrettyCheckboxAnimation, decorators: [{ type: Attribute, args: ['animation',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['isSwitch',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['bigger',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['enableFocus',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['plain',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['outline',] }] },
    { type: PrettyCheckboxColor, decorators: [{ type: Attribute, args: ['color',] }] },
    { type: String, decorators: [{ type: Attribute, args: ['name',] }] }
];
NgxPrettyRadioComponent.propDecorators = {
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    value: [{ type: Input }],
    lock: [{ type: Input }],
    _inputElem: [{ type: ViewChild, args: ['inputElem', { static: true },] }],
    _stateElem: [{ type: ViewChild, args: ['stateElem', { static: false },] }],
    change: [{ type: Output }],
    _iconDir: [{ type: ContentChild, args: [NgxPrettyIconDirective, { static: false },] }],
    _svgDir: [{ type: ContentChild, args: [NgxPrettySvgDirective, { static: false },] }],
    _imgDir: [{ type: ContentChild, args: [NgxPrettyImageDirective, { static: false },] }],
    _hoverDir: [{ type: ContentChild, args: [NgxPrettyHoverComponent, { static: false },] }],
    _hoverWillChangeDir: [{ type: ContentChild, args: [NgxPrettyHoverWillChangeComponent, { static: false },] }],
    _toggleComps: [{ type: ContentChildren, args: [NgxPrettyToggleComponent,] }],
    _toggleWillChangeComps: [{ type: ContentChildren, args: [NgxPrettyToggleWillChangeComponent,] }]
};
//# sourceMappingURL=data:application/json;base64,
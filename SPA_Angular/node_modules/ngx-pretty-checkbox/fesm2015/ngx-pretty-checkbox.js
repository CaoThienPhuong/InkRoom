import { Directive, ElementRef, Component, ChangeDetectionStrategy, Renderer2, Input, Attribute, EventEmitter, ViewEncapsulation, ChangeDetectorRef, ViewChild, Output, ContentChild, ContentChildren, Optional, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

class NgxPrettyIconDirective {
    constructor(elemRef) {
        this.elemRef = elemRef;
        this.elemRef.nativeElement.classList.add('icon');
    }
}
NgxPrettyIconDirective.decorators = [
    { type: Directive, args: [{
                selector: '[pIcon], [p-icon]'
            },] }
];
NgxPrettyIconDirective.ctorParameters = () => [
    { type: ElementRef }
];

class NgxPrettyImageDirective {
    constructor(elemRef) {
        this.elemRef = elemRef;
        this.elemRef.nativeElement.classList.add('image');
    }
}
NgxPrettyImageDirective.decorators = [
    { type: Directive, args: [{
                selector: '[pImage], [p-image]'
            },] }
];
NgxPrettyImageDirective.ctorParameters = () => [
    { type: ElementRef }
];

class NgxPrettySvgDirective {
    constructor(elemRef) {
        this.elemRef = elemRef;
    }
    ngAfterViewInit() {
        this.elemRef.nativeElement.classList.add('svg');
    }
}
NgxPrettySvgDirective.decorators = [
    { type: Directive, args: [{
                selector: '[pSvg], [p-svg]'
            },] }
];
NgxPrettySvgDirective.ctorParameters = () => [
    { type: ElementRef }
];

var PrettyCheckBoxToggleType;
(function (PrettyCheckBoxToggleType) {
    PrettyCheckBoxToggleType["On"] = "on";
    PrettyCheckBoxToggleType["Off"] = "off";
})(PrettyCheckBoxToggleType || (PrettyCheckBoxToggleType = {}));
var PrettyCheckboxStroke;
(function (PrettyCheckboxStroke) {
    // Accept Null
    PrettyCheckboxStroke["Fill"] = "fill";
    PrettyCheckboxStroke["Thick"] = "thick";
    PrettyCheckboxStroke["Slim"] = "slim"; // Switch
})(PrettyCheckboxStroke || (PrettyCheckboxStroke = {}));
var PrettyCheckboxShape;
(function (PrettyCheckboxShape) {
    // Accept Null
    PrettyCheckboxShape["Curve"] = "curve";
    PrettyCheckboxShape["Round"] = "round";
})(PrettyCheckboxShape || (PrettyCheckboxShape = {}));
var PrettyCheckboxColor;
(function (PrettyCheckboxColor) {
    PrettyCheckboxColor["Primary"] = "primary";
    PrettyCheckboxColor["Success"] = "success";
    PrettyCheckboxColor["Info"] = "info";
    PrettyCheckboxColor["Warning"] = "warning";
    PrettyCheckboxColor["Danger"] = "danger";
})(PrettyCheckboxColor || (PrettyCheckboxColor = {}));
var PrettyCheckboxAnimation;
(function (PrettyCheckboxAnimation) {
    PrettyCheckboxAnimation["Smooth"] = "smooth";
    PrettyCheckboxAnimation["Jelly"] = "jelly";
    PrettyCheckboxAnimation["Tada"] = "tada";
    PrettyCheckboxAnimation["Rotate"] = "rotate";
    PrettyCheckboxAnimation["Pulse"] = "pulse";
})(PrettyCheckboxAnimation || (PrettyCheckboxAnimation = {}));

// import { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from './model/params';
function getColorClassName(color, outline) {
    if (!color) {
        return null;
    }
    return 'p-' + color + (outline ? '-o' : '');
}
function strToBoolean(str) {
    if (typeof str === 'boolean') {
        return str;
    }
    const regex = /^\s*(true|1|on|enable)\s*$/i;
    return regex.test(str);
}

class NgxPrettyHoverWillChangeComponent {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.outline = false;
    }
    ngOnChanges(changes) {
        if (changes.color || changes.outline) {
            const oldClass = getColorClassName(changes.color ? changes.color.previousValue : this.color, changes.outline ? changes.outline.previousValue : null);
            const newClass = getColorClassName(changes.color ? changes.color.currentValue : this.color, changes.outline ? changes.outline.currentValue : null);
            this.renderer.removeClass(this.el.nativeElement, oldClass);
            this.renderer.addClass(this.el.nativeElement, newClass);
        }
    }
}
NgxPrettyHoverWillChangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-p-hover[will-change], p-hover[will-change]',
                template: "<ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n\r\n<label><ng-content></ng-content></label>",
                host: {
                    class: `state p-is-hover`
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
NgxPrettyHoverWillChangeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
NgxPrettyHoverWillChangeComponent.propDecorators = {
    color: [{ type: Input }],
    outline: [{ type: Input }]
};

class NgxPrettyHoverComponent {
    constructor(el, renderer, _outline = false, _color) {
        this.el = el;
        this.renderer = renderer;
        this._outline = _outline;
        this._color = _color;
    }
    ngAfterViewInit() {
        if (this._color) {
            this.renderer.addClass(this.el.nativeElement, `p-${this._color}${this._outline ? '-o' : ''}`);
        }
    }
}
NgxPrettyHoverComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-p-hover:not([will-change]), p-hover:not([will-change])',
                template: "<ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n\r\n<label><ng-content></ng-content></label>",
                host: {
                    class: `state p-is-hover`
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
NgxPrettyHoverComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Attribute, args: ['outline',] }] },
    { type: PrettyCheckboxColor, decorators: [{ type: Attribute, args: ['color',] }] }
];

class NgxPrettyIndeterminateWillChangeComponent {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.outline = false;
    }
    ngOnChanges(changes) {
        if (changes.color || changes.outline) {
            const oldClass = getColorClassName(changes.color ? changes.color.previousValue : this.color, changes.outline ? changes.outline.previousValue : null);
            const newClass = getColorClassName(changes.color ? changes.color.currentValue : this.color, changes.outline ? changes.outline.currentValue : null);
            this.renderer.removeClass(this.el.nativeElement, oldClass);
            this.renderer.addClass(this.el.nativeElement, newClass);
        }
    }
}
NgxPrettyIndeterminateWillChangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-p-indeterminate[will-change], p-indeterminate[will-change]',
                template: "<ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n\r\n<label><ng-content></ng-content></label>",
                host: {
                    class: `state p-is-indeterminate`
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
NgxPrettyIndeterminateWillChangeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
NgxPrettyIndeterminateWillChangeComponent.propDecorators = {
    color: [{ type: Input }],
    outline: [{ type: Input }]
};

class NgxPrettyIndeterminateComponent {
    constructor(el, renderer, _outline = false, _color) {
        this.el = el;
        this.renderer = renderer;
        this._outline = _outline;
        this._color = _color;
    }
    ngAfterViewInit() {
        if (this._color) {
            this.renderer.addClass(this.el.nativeElement, `p-${this._color}${this._outline ? '-o' : ''}`);
        }
    }
}
NgxPrettyIndeterminateComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-p-indeterminate:not([will-change]), p-indeterminate:not([will-change])',
                template: "<ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n\r\n<label><ng-content></ng-content></label>",
                host: {
                    class: `state p-is-indeterminate`
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
NgxPrettyIndeterminateComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Attribute, args: ['outline',] }] },
    { type: PrettyCheckboxColor, decorators: [{ type: Attribute, args: ['color',] }] }
];

class NgxPrettyToggleWillChangeComponent {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.outline = false;
    }
    get isToggleOn() { return this.type === PrettyCheckBoxToggleType.On; }
    get isToggleOff() { return this.type === PrettyCheckBoxToggleType.Off; }
    ngOnChanges(changes) {
        if (changes.color || changes.outline) {
            const oldClass = getColorClassName(changes.color ? changes.color.previousValue : this.color, changes.outline ? changes.outline.previousValue : null);
            const newClass = getColorClassName(changes.color ? changes.color.currentValue : this.color, changes.outline ? changes.outline.currentValue : null);
            this.renderer.removeClass(this.el.nativeElement, oldClass);
            this.renderer.addClass(this.el.nativeElement, newClass);
        }
    }
}
NgxPrettyToggleWillChangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-p-toggle[will-change], p-toggle[will-change]',
                template: "<ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n<label><ng-content></ng-content></label>",
                host: {
                    'class': 'state',
                    '[class.p-on]': 'isToggleOn',
                    '[class.p-off]': 'isToggleOff',
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
NgxPrettyToggleWillChangeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
NgxPrettyToggleWillChangeComponent.propDecorators = {
    type: [{ type: Input }],
    color: [{ type: Input }],
    outline: [{ type: Input }]
};

// tslint:disable:use-host-property-decorator
class NgxPrettyToggleComponent {
    constructor(el, renderer, _outline = false, _color, _type) {
        this.el = el;
        this.renderer = renderer;
        this._outline = _outline;
        this._color = _color;
        this._type = _type;
    }
    ngAfterViewInit() {
        if (this._color) {
            this.renderer.addClass(this.el.nativeElement, `p-${this._color}${this._outline ? '-o' : ''}`);
        }
        this.renderer.addClass(this.el.nativeElement, `p-${this._type}`);
    }
}
NgxPrettyToggleComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-p-toggle:not([will-change]), p-toggle:not([will-change])',
                template: "<ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n\r\n<label><ng-content></ng-content></label>",
                host: {
                    class: 'state'
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
NgxPrettyToggleComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Attribute, args: ['outline',] }] },
    { type: PrettyCheckboxColor, decorators: [{ type: Attribute, args: ['color',] }] },
    { type: PrettyCheckBoxToggleType, decorators: [{ type: Attribute, args: ['type',] }] }
];

class NgxPrettyCheckboxComponent {
    constructor(renderer, el, cd, _stroke, _shape, _animation, _isSwitch = false, _bigger = false, _enableFocus = false, _plain = false, _outline = false, _color) {
        this.renderer = renderer;
        this.el = el;
        this.cd = cd;
        this._stroke = _stroke;
        this._shape = _shape;
        this._animation = _animation;
        this._isSwitch = _isSwitch;
        this._bigger = _bigger;
        this._enableFocus = _enableFocus;
        this._plain = _plain;
        this._outline = _outline;
        this._color = _color;
        this.checked = false;
        this.disabled = false;
        // @HostBinding(`class.p-locked`)
        this.lock = false;
        this.change = new EventEmitter();
        this._isSwitch = strToBoolean(this._isSwitch);
        this._bigger = strToBoolean(this._bigger);
        this._enableFocus = strToBoolean(this._enableFocus);
        this._plain = strToBoolean(this._plain);
        this._outline = strToBoolean(this._outline);
    }
    ngAfterViewInit() {
        const el = this.el.nativeElement;
        if (this._isSwitch) {
            this.renderer.addClass(el, `p-switch`);
        }
        if (this._bigger) {
            this.renderer.addClass(el, `p-bigger`);
        }
        if (this._enableFocus) {
            this.renderer.addClass(el, `p-has-focus`);
        }
        if (this._plain) {
            this.renderer.addClass(el, `p-plain`);
        }
        if (this._stroke) {
            this.renderer.addClass(el, `p-${this._stroke}`);
        }
        if (this._shape) {
            this.renderer.addClass(el, `p-${this._shape}`);
        }
        if (this._animation) {
            this.renderer.addClass(el, `p-${this._animation}`);
        }
        if (this._iconDir) {
            this.renderer.addClass(el, `p-icon`);
        }
        if (this._svgDir) {
            this.renderer.addClass(el, `p-svg`);
        }
        if (this._imgDir) {
            this.renderer.addClass(el, `p-image`);
        }
        if (this._hoverDir || this._hoverWillChangeDir) {
            this.renderer.addClass(el, `p-has-hover`);
        }
        if (this._indeterminateDir || this._indeterminateWillChangeDir) {
            this.renderer.addClass(el, `p-has-indeterminate`);
        }
        if (this._isToggle) {
            this.renderer.addClass(el, `p-toggle`);
        }
        if (!this._isSwitch && !this._iconDir && !this._svgDir && !this._imgDir) {
            this.renderer.addClass(el, `p-default`);
        }
        // STATE ELEM
        if (this._color && !this._isToggle) {
            this.renderer.addClass(this._stateElem.nativeElement, `p-${this._color}${this._outline ? '-o' : ''}`);
        }
    }
    // ---------- PRIVATE METHODS ---------
    _onChange(event, checked, value) {
        // I stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        event.stopPropagation();
        this.checked = checked;
        this.change.emit({ value, checked, event });
    }
    get _isToggle() { return this._toggleComps.length === 2 || this._toggleWillChangeComps.length === 2; }
    // ---------- PUBLIC METHODS ---------
    setIndeterminate(value = true) {
        this._inputElem.nativeElement.indeterminate = value;
    }
    forceCheck(check) {
        this.checked = check;
        this.cd.markForCheck();
    }
}
NgxPrettyCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-pretty-checkbox:not([will-change]), p-checkbox:not([will-change])',
                template: "<input\r\n  #inputElem\r\n  type=\"checkbox\"\r\n  [value]=\"value\"\r\n  [checked]=\"checked\"\r\n  [disabled]=\"disabled\"\r\n  (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n<div #stateElem *ngIf=\"!_isToggle\" class=\"state\">\r\n\r\n  <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n  <label><ng-content></ng-content></label>\r\n\r\n</div>\r\n\r\n<ng-content select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\r\n",
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': 'pretty',
                    '[class.p-locked]': 'lock'
                },
                exportAs: 'ngxPrettyCheckbox'
            },] }
];
NgxPrettyCheckboxComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: PrettyCheckboxStroke, decorators: [{ type: Attribute, args: ['stroke',] }] },
    { type: PrettyCheckboxShape, decorators: [{ type: Attribute, args: ['shape',] }] },
    { type: PrettyCheckboxAnimation, decorators: [{ type: Attribute, args: ['animation',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['isSwitch',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['bigger',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['enableFocus',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['plain',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['outline',] }] },
    { type: PrettyCheckboxColor, decorators: [{ type: Attribute, args: ['color',] }] }
];
NgxPrettyCheckboxComponent.propDecorators = {
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    value: [{ type: Input }],
    lock: [{ type: Input }],
    _inputElem: [{ type: ViewChild, args: ['inputElem', { static: true },] }],
    _stateElem: [{ type: ViewChild, args: ['stateElem', { static: false },] }],
    change: [{ type: Output }],
    _iconDir: [{ type: ContentChild, args: [NgxPrettyIconDirective, { static: false },] }],
    _svgDir: [{ type: ContentChild, args: [NgxPrettySvgDirective, { static: false },] }],
    _imgDir: [{ type: ContentChild, args: [NgxPrettyImageDirective, { static: false },] }],
    _hoverDir: [{ type: ContentChild, args: [NgxPrettyHoverComponent, { static: false },] }],
    _hoverWillChangeDir: [{ type: ContentChild, args: [NgxPrettyHoverWillChangeComponent, { static: false },] }],
    _indeterminateDir: [{ type: ContentChild, args: [NgxPrettyIndeterminateComponent, { static: false },] }],
    _indeterminateWillChangeDir: [{ type: ContentChild, args: [NgxPrettyIndeterminateWillChangeComponent, { static: false },] }],
    _toggleComps: [{ type: ContentChildren, args: [NgxPrettyToggleComponent,] }],
    _toggleWillChangeComps: [{ type: ContentChildren, args: [NgxPrettyToggleWillChangeComponent,] }]
};

class NgxPrettyCheckboxWillChangeComponent {
    constructor(cd) {
        this.cd = cd;
        this.change = new EventEmitter();
        this.outline = false; // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).
        this.checked = false;
        this.disabled = false;
        // ----- INPUTS AND BINDING ------
        this.isSwitch = false;
        this.lock = false;
        this.bigger = false;
        this.enableFocus = false;
        this.plain = false; // To remove the border ( when checkbox is checked )
    }
    // ---------- STROKE ----------
    get _isFill() { return this.stroke === PrettyCheckboxStroke.Fill; }
    get _isSlim() { return this.stroke === PrettyCheckboxStroke.Slim; }
    get _isThick() { return this.stroke === PrettyCheckboxStroke.Thick; }
    // ---------- SHAPE ----------
    get _isCurve() { return this.shape === PrettyCheckboxShape.Curve; }
    get _isRound() { return this.shape === PrettyCheckboxShape.Round; }
    // ---------- ANIMATION ----------
    get _isSmooth() { return this.animation === PrettyCheckboxAnimation.Smooth; }
    get _isJelly() { return this.animation === PrettyCheckboxAnimation.Jelly; }
    get _isTada() { return this.animation === PrettyCheckboxAnimation.Tada; }
    get _isRotate() { return this.animation === PrettyCheckboxAnimation.Rotate; }
    get _isPulse() { return this.animation === PrettyCheckboxAnimation.Pulse; }
    get _isToggle() { return this._toggleComp.length === 2 || this._toggleWillChangeComp.length === 2; }
    // DEFAULT
    get _isDefault() { return !this.isSwitch && !this._iconElem && !this._svgElem && !this._imageElem; }
    get _isHover() { return this._hoverComp || this._hoverWillChangeDir; }
    get _isIndeterminate() { return this._indeterminateComp || this._indeterminateWillChangeComp; }
    // ---------- PRIVATE METHODS ---------
    _onChange(event, checked, value) {
        // I stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up
        event.stopPropagation();
        this.checked = checked;
        this.change.emit({ value, checked, event });
    }
    // ---------- PUBLIC METHODS ---------
    setIndeterminate(value = true) {
        this._inputElem.nativeElement.indeterminate = value;
    }
    forceCheck(check) {
        this.checked = check;
        this.cd.markForCheck();
    }
}
NgxPrettyCheckboxWillChangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-pretty-checkbox[will-change], p-checkbox[will-change]',
                template: "<input\r\n  #inputElem\r\n  type=\"checkbox\"\r\n  [value]=\"value\"\r\n  [checked]=\"checked\"\r\n  [disabled]=\"disabled\"\r\n  (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n<div\r\n  *ngIf=\"!_isToggle\"\r\n  class=\"state\"\r\n  [ngClass]=\"[ color ? 'p-' + color + (outline ? '-o' : '') : '' ]\">\r\n\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n\r\n    <label><ng-content></ng-content></label>\r\n\r\n</div>\r\n\r\n<ng-content\r\n  select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\">\r\n</ng-content>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': 'pretty',
                    '[class.p-switch]': 'isSwitch',
                    '[class.p-locked]': 'lock',
                    '[class.p-bigger]': 'bigger',
                    '[class.p-has-focus]': 'enableFocus',
                    '[class.p-plain]': 'plain',
                    '[class.p-fill]': '_isFill',
                    '[class.p-slim]': '_isSlim',
                    '[class.p-thick]': '_isThick',
                    '[class.p-curve]': '_isCurve',
                    '[class.p-round]': '_isRound',
                    '[class.p-smooth]': '_isSmooth',
                    '[class.p-jelly]': '_isJelly',
                    '[class.p-tada]': '_isTada',
                    '[class.p-rotate]': '_isRotate',
                    '[class.p-pulse]': '_isPulse',
                    '[class.p-toggle]': '_isToggle',
                    '[class.p-default]': '_isDefault',
                    '[class.p-icon]': '_iconElem',
                    '[class.p-svg]': '_svgElem',
                    '[class.p-image]': '_imageElem',
                    '[class.p-has-hover]': '_isHover',
                    '[class.p-has-indeterminate]': '_isIndeterminate',
                },
                exportAs: 'ngxPrettyCheckboxWillChange'
            },] }
];
NgxPrettyCheckboxWillChangeComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NgxPrettyCheckboxWillChangeComponent.propDecorators = {
    _inputElem: [{ type: ViewChild, args: ['inputElem', { static: true },] }],
    change: [{ type: Output }],
    stroke: [{ type: Input }],
    shape: [{ type: Input }],
    animation: [{ type: Input }],
    color: [{ type: Input }],
    outline: [{ type: Input }],
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    value: [{ type: Input }],
    isSwitch: [{ type: Input }],
    lock: [{ type: Input }],
    bigger: [{ type: Input }],
    enableFocus: [{ type: Input }],
    plain: [{ type: Input }],
    _toggleComp: [{ type: ContentChildren, args: [NgxPrettyToggleComponent,] }],
    _toggleWillChangeComp: [{ type: ContentChildren, args: [NgxPrettyToggleWillChangeComponent,] }],
    _iconElem: [{ type: ContentChild, args: [NgxPrettyIconDirective, { static: false },] }],
    _svgElem: [{ type: ContentChild, args: [NgxPrettySvgDirective, { static: false },] }],
    _imageElem: [{ type: ContentChild, args: [NgxPrettyImageDirective, { static: false },] }],
    _hoverWillChangeDir: [{ type: ContentChild, args: [NgxPrettyHoverWillChangeComponent, { static: false },] }],
    _hoverComp: [{ type: ContentChild, args: [NgxPrettyHoverComponent, { static: false },] }],
    _indeterminateComp: [{ type: ContentChild, args: [NgxPrettyIndeterminateComponent, { static: false },] }],
    _indeterminateWillChangeComp: [{ type: ContentChild, args: [NgxPrettyIndeterminateWillChangeComponent, { static: false },] }]
};

let nextId = 1;
class NgxPrettyRadioGroupDirective {
    constructor() {
        this.name = 'p-radio' + nextId++;
        this.change = new EventEmitter();
    }
    _emitChange(event) {
        this.change.emit(event);
    }
}
NgxPrettyRadioGroupDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ngx-pretty-radio-group, p-radio-group',
                // providers: [NgxPrettyRadioService],
                exportAs: 'ngxRadioGroup'
            },] }
];
NgxPrettyRadioGroupDirective.ctorParameters = () => [];
NgxPrettyRadioGroupDirective.propDecorators = {
    change: [{ type: Output }]
};

class NgxPrettyRadioComponent {
    constructor(renderer, el, radioGroup, _stroke, _shape, _animation, _isSwitch = false, _bigger = false, _enableFocus = false, _plain = false, _outline = false, _color, _name) {
        this.renderer = renderer;
        this.el = el;
        this.radioGroup = radioGroup;
        this._stroke = _stroke;
        this._shape = _shape;
        this._animation = _animation;
        this._isSwitch = _isSwitch;
        this._bigger = _bigger;
        this._enableFocus = _enableFocus;
        this._plain = _plain;
        this._outline = _outline;
        this._color = _color;
        this._name = _name;
        this.checked = false;
        this.disabled = false;
        this.lock = false;
        this.change = new EventEmitter();
        if (!this._name && this.radioGroup) {
            this._name = this.radioGroup.name;
        }
        this._isSwitch = strToBoolean(this._isSwitch);
        this._bigger = strToBoolean(this._bigger);
        this._enableFocus = strToBoolean(this._enableFocus);
        this._plain = strToBoolean(this._plain);
        this._outline = strToBoolean(this._outline);
    }
    ngAfterViewInit() {
        const el = this.el.nativeElement;
        if (this._isSwitch) {
            this.renderer.addClass(el, `p-switch`);
        }
        if (this._bigger) {
            this.renderer.addClass(el, `p-bigger`);
        }
        if (this._enableFocus) {
            this.renderer.addClass(el, `p-has-focus`);
        }
        if (this._plain) {
            this.renderer.addClass(el, `p-plain`);
        }
        if (this._stroke) {
            this.renderer.addClass(el, `p-${this._stroke}`);
        }
        if (this._shape) {
            this.renderer.addClass(el, `p-${this._shape}`);
        }
        if (this._animation) {
            this.renderer.addClass(el, `p-${this._animation}`);
        }
        if (this._iconDir) {
            this.renderer.addClass(el, `p-icon`);
        }
        if (this._svgDir) {
            this.renderer.addClass(el, `p-svg`);
        }
        if (this._imgDir) {
            this.renderer.addClass(el, `p-image`);
        }
        if (this._hoverDir || this._hoverWillChangeDir) {
            this.renderer.addClass(el, `p-has-hover`);
        }
        if (this._isToggle) {
            this.renderer.addClass(el, `p-toggle`);
        }
        if (!this._isSwitch && !this._iconDir && !this._svgDir && !this._imgDir) {
            this.renderer.addClass(el, `p-default`);
        }
        // STATE ELEM
        if (this._color && !this._isToggle) {
            this.renderer.addClass(this._stateElem.nativeElement, `p-${this._color}${this._outline ? '-o' : ''}`);
        }
    }
    // ---------- METHODS ---------
    _onChange(event, checked, value) {
        // I stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        event.stopPropagation();
        this.change.emit({ value, checked, event });
        if (this.radioGroup) {
            this.radioGroup._emitChange({ value, checked, event });
        }
    }
    get _isToggle() { return this._toggleComps.length === 2 || this._toggleWillChangeComps.length === 2; }
}
NgxPrettyRadioComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-pretty-radio:not([will-change]), p-radio:not([will-change])',
                template: "<input\r\n  #inputElem\r\n  type=\"radio\"\r\n  [name]=\"_name\"\r\n  [value]=\"value\"\r\n  [checked]=\"checked\"\r\n  [disabled]=\"disabled\"\r\n  (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n<div #stateElem *ngIf=\"!_isToggle\" class=\"state\">\r\n\r\n  <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n  <label><ng-content></ng-content></label>\r\n\r\n</div>\r\n\r\n<ng-content select=\"ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>",
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': 'pretty',
                    '[class.p-locked]': 'lock'
                },
                exportAs: 'ngxPrettyRadio'
            },] }
];
NgxPrettyRadioComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgxPrettyRadioGroupDirective, decorators: [{ type: Optional }] },
    { type: PrettyCheckboxStroke, decorators: [{ type: Attribute, args: ['stroke',] }] },
    { type: PrettyCheckboxShape, decorators: [{ type: Attribute, args: ['shape',] }] },
    { type: PrettyCheckboxAnimation, decorators: [{ type: Attribute, args: ['animation',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['isSwitch',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['bigger',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['enableFocus',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['plain',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['outline',] }] },
    { type: PrettyCheckboxColor, decorators: [{ type: Attribute, args: ['color',] }] },
    { type: String, decorators: [{ type: Attribute, args: ['name',] }] }
];
NgxPrettyRadioComponent.propDecorators = {
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    value: [{ type: Input }],
    lock: [{ type: Input }],
    _inputElem: [{ type: ViewChild, args: ['inputElem', { static: true },] }],
    _stateElem: [{ type: ViewChild, args: ['stateElem', { static: false },] }],
    change: [{ type: Output }],
    _iconDir: [{ type: ContentChild, args: [NgxPrettyIconDirective, { static: false },] }],
    _svgDir: [{ type: ContentChild, args: [NgxPrettySvgDirective, { static: false },] }],
    _imgDir: [{ type: ContentChild, args: [NgxPrettyImageDirective, { static: false },] }],
    _hoverDir: [{ type: ContentChild, args: [NgxPrettyHoverComponent, { static: false },] }],
    _hoverWillChangeDir: [{ type: ContentChild, args: [NgxPrettyHoverWillChangeComponent, { static: false },] }],
    _toggleComps: [{ type: ContentChildren, args: [NgxPrettyToggleComponent,] }],
    _toggleWillChangeComps: [{ type: ContentChildren, args: [NgxPrettyToggleWillChangeComponent,] }]
};

class NgxPrettyRadioWillChangeComponent {
    constructor(radioGroup) {
        this.radioGroup = radioGroup;
        this.change = new EventEmitter();
        this.outline = false; // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).
        this.checked = false;
        this.disabled = false;
        // ----- INPUTS AND BINDING ------
        this.isSwitch = false;
        this.lock = false;
        this.bigger = false;
        this.enableFocus = false;
        this.plain = false; // To remove the border ( when checkbox is checked )
        if (radioGroup) {
            this.radioGroupName = radioGroup.name;
        }
    }
    // ---------- STROKE ----------
    get _isFill() { return this.stroke === PrettyCheckboxStroke.Fill; }
    get _isSlim() { return this.stroke === PrettyCheckboxStroke.Slim; }
    get _isThick() { return this.stroke === PrettyCheckboxStroke.Thick; }
    // ---------- SHAPE ----------
    get _isCurve() { return this.shape === PrettyCheckboxShape.Curve; }
    get _isRound() { return this.shape === PrettyCheckboxShape.Round; }
    // ---------- ANIMATION ----------
    get _isSmooth() { return this.animation === PrettyCheckboxAnimation.Smooth; }
    get _isJelly() { return this.animation === PrettyCheckboxAnimation.Jelly; }
    get _isTada() { return this.animation === PrettyCheckboxAnimation.Tada; }
    get _isRotate() { return this.animation === PrettyCheckboxAnimation.Rotate; }
    get _isPulse() { return this.animation === PrettyCheckboxAnimation.Pulse; }
    get _isToggle() { return this._toggleComp.length === 2 || this._toggleWillChangeComp.length === 2; }
    // DEFAULT
    get _isDefault() { return !this.isSwitch && !this._iconElem && !this._svgElem && !this._imageElem; }
    get _isHover() { return this._hoverComp || this._hoverWillChangeDir; }
    // ---------- METHODS ---------
    _onChange(event, checked, value) {
        // I stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        event.stopPropagation();
        this.change.emit({ value, checked, event });
        if (this.radioGroup) {
            this.radioGroup._emitChange({ value, checked, event });
        }
    }
}
NgxPrettyRadioWillChangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-pretty-radio[will-change], p-radio[will-change]',
                template: "<input\r\n  #inputElem\r\n  type=\"radio\"\r\n  [name]=\"name || radioGroupName\"\r\n  [value]=\"value\"\r\n  [checked]=\"checked\"\r\n  [disabled]=\"disabled\"\r\n  (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n<div *ngIf=\"!_isToggle\" class=\"state\"\r\n    [ngClass]=\"[ color ? 'p-' + color + (outline ? '-o' : '') : '' ]\">\r\n\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n</div>\r\n\r\n<ng-content select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': 'pretty',
                    '[class.p-switch]': 'isSwitch',
                    '[class.p-locked]': 'lock',
                    '[class.p-bigger]': 'bigger',
                    '[class.p-has-focus]': 'enableFocus',
                    '[class.p-plain]': 'plain',
                    '[class.p-fill]': '_isFill',
                    '[class.p-thick]': '_isSlim',
                    '[class.p-slim]': '_isThick',
                    '[class.p-curve]': '_isCurve',
                    '[class.p-round]': '_isRound',
                    '[class.p-smooth]': '_isSmooth',
                    '[class.p-jelly]': '_isJelly',
                    '[class.p-tada]': '_isTada',
                    '[class.p-rotate]': '_isRotate',
                    '[class.p-pulse]': '_isPulse',
                    '[class.p-toggle]': '_isToggle',
                    '[class.p-default]': '_isDefault',
                    '[class.p-icon]': '_iconElem',
                    '[class.p-svg]': '_svgElem',
                    '[class.p-image]': '_imageElem',
                    '[class.p-has-hover]': '_isHover',
                },
                exportAs: 'ngxPrettyRadio'
            },] }
];
NgxPrettyRadioWillChangeComponent.ctorParameters = () => [
    { type: NgxPrettyRadioGroupDirective, decorators: [{ type: Optional }] }
];
NgxPrettyRadioWillChangeComponent.propDecorators = {
    _inputElem: [{ type: ViewChild, args: ['inputElem', { static: true },] }],
    change: [{ type: Output }],
    stroke: [{ type: Input }],
    shape: [{ type: Input }],
    animation: [{ type: Input }],
    color: [{ type: Input }],
    outline: [{ type: Input }],
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    value: [{ type: Input }],
    name: [{ type: Input }],
    isSwitch: [{ type: Input }],
    lock: [{ type: Input }],
    bigger: [{ type: Input }],
    enableFocus: [{ type: Input }],
    plain: [{ type: Input }],
    _toggleComp: [{ type: ContentChildren, args: [NgxPrettyToggleComponent,] }],
    _toggleWillChangeComp: [{ type: ContentChildren, args: [NgxPrettyToggleWillChangeComponent,] }],
    _iconElem: [{ type: ContentChild, args: [NgxPrettyIconDirective, { static: false },] }],
    _svgElem: [{ type: ContentChild, args: [NgxPrettySvgDirective, { static: false },] }],
    _imageElem: [{ type: ContentChild, args: [NgxPrettyImageDirective, { static: false },] }],
    _hoverWillChangeDir: [{ type: ContentChild, args: [NgxPrettyHoverWillChangeComponent, { static: false },] }],
    _hoverComp: [{ type: ContentChild, args: [NgxPrettyHoverComponent, { static: false },] }]
};

const DECLARATIONS = [
    NgxPrettyCheckboxComponent,
    NgxPrettyCheckboxWillChangeComponent,
    NgxPrettyIconDirective,
    NgxPrettySvgDirective,
    NgxPrettyImageDirective,
    NgxPrettyToggleComponent,
    NgxPrettyToggleWillChangeComponent,
    NgxPrettyHoverComponent,
    NgxPrettyHoverWillChangeComponent,
    NgxPrettyIndeterminateComponent,
    NgxPrettyIndeterminateWillChangeComponent,
    NgxPrettyRadioGroupDirective,
    NgxPrettyRadioComponent,
    NgxPrettyRadioWillChangeComponent
];
class NgxPrettyCheckboxModule {
}
NgxPrettyCheckboxModule.decorators = [
    { type: NgModule, args: [{
                declarations: [DECLARATIONS],
                imports: [CommonModule, FormsModule],
                exports: [DECLARATIONS]
            },] }
];

/*
 * Public API Surface of ngx-pretty-checkbox
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxPrettyCheckboxComponent, NgxPrettyCheckboxModule, NgxPrettyCheckboxWillChangeComponent, NgxPrettyHoverComponent, NgxPrettyHoverWillChangeComponent, NgxPrettyIconDirective, NgxPrettyImageDirective, NgxPrettyIndeterminateComponent, NgxPrettyIndeterminateWillChangeComponent, NgxPrettyRadioComponent, NgxPrettyRadioGroupDirective, NgxPrettyRadioWillChangeComponent, NgxPrettySvgDirective, NgxPrettyToggleComponent, NgxPrettyToggleWillChangeComponent, PrettyCheckBoxToggleType, PrettyCheckboxAnimation, PrettyCheckboxColor, PrettyCheckboxShape, PrettyCheckboxStroke };
//# sourceMappingURL=ngx-pretty-checkbox.js.map

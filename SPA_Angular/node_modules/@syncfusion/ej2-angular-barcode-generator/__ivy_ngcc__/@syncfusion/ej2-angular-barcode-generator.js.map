{"version":3,"file":"ej2-angular-barcode-generator.js","sources":["~/@syncfusion/ej2-angular-barcode-generator/src/barcode-generator/barcodegenerator.component.ts","~/@syncfusion/ej2-angular-barcode-generator/src/barcode-generator/barcodegenerator.module.ts","~/@syncfusion/ej2-angular-barcode-generator/src/barcode-generator/barcodegenerator-all.module.ts","~/@syncfusion/ej2-angular-barcode-generator/src/qrcode-generator/qrcodegenerator.component.ts","~/@syncfusion/ej2-angular-barcode-generator/src/qrcode-generator/qrcodegenerator.module.ts","~/@syncfusion/ej2-angular-barcode-generator/src/qrcode-generator/qrcodegenerator-all.module.ts","~/@syncfusion/ej2-angular-barcode-generator/src/datamatrix-generator/datamatrixgenerator.component.ts","~/@syncfusion/ej2-angular-barcode-generator/src/datamatrix-generator/datamatrixgenerator.module.ts","~/@syncfusion/ej2-angular-barcode-generator/src/datamatrix-generator/datamatrixgenerator-all.module.ts","~/@syncfusion/ej2-angular-barcode-generator/ej2-angular-barcode-generator.ts"],"names":["inputs","outputs","twoWays","__decorate","__metadata"],"mappings":"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","sourcesContent":["import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { BarcodeGenerator } from '@syncfusion/ej2-barcode-generator';\n\n\n\nexport const /** @type {?} */ inputs: string[] = ['backgroundColor','displayText','enableCheckSum','enablePersistence','enableRtl','foreColor','height','locale','margin','mode','type','value','width'];\nexport const /** @type {?} */ outputs: string[] = ['invalid'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * Barcode Component\n * ```html\n * <ej-barcode-generator></ej-barcode-generator>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class BarcodeGeneratorComponent extends BarcodeGenerator implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic invalid: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        \n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-barcodegenerator',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction BarcodeGeneratorComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nBarcodeGeneratorComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBarcodeGeneratorComponent.ctorParameters;\n/** @type {?} */\nBarcodeGeneratorComponent.prototype.context;\n/** @type {?} */\nBarcodeGeneratorComponent.prototype.tagObjects;\n/** @type {?} */\nBarcodeGeneratorComponent.prototype.invalid;\n/** @type {?} */\nBarcodeGeneratorComponent.prototype.registerEvents;\n/** @type {?} */\nBarcodeGeneratorComponent.prototype.addTwoWay;\n/** @type {?} */\nBarcodeGeneratorComponent.prototype.ngEle;\n/** @type {?} */\nBarcodeGeneratorComponent.prototype.srenderer;\n/** @type {?} */\nBarcodeGeneratorComponent.prototype.viewContainerRef;\n/** @type {?} */\nBarcodeGeneratorComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BarcodeGeneratorComponent } from './barcodegenerator.component';\n/**\n * NgModule definition for the BarcodeGenerator component.\n */\nexport class BarcodeGeneratorModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        BarcodeGeneratorComponent\n    ],\n    exports: [\n        BarcodeGeneratorComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BarcodeGeneratorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBarcodeGeneratorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBarcodeGeneratorModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BarcodeGeneratorComponent } from './barcodegenerator.component';\nimport { BarcodeGeneratorModule } from './barcodegenerator.module';\n/**\n * NgModule definition for the BarcodeGenerator component with providers.\n */\nexport class BarcodeGeneratorAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, BarcodeGeneratorModule],\n    exports: [\n        BarcodeGeneratorModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BarcodeGeneratorAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBarcodeGeneratorAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBarcodeGeneratorAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { QRCodeGenerator } from '@syncfusion/ej2-barcode-generator';\n\n\n\nexport const /** @type {?} */ inputs: string[] = ['backgroundColor','displayText','enablePersistence','enableRtl','errorCorrectionLevel','foreColor','height','locale','margin','mode','value','version','width','xDimension'];\nexport const /** @type {?} */ outputs: string[] = ['invalid'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * QRCode Component\n * ```html\n * <ej-qrcode-generator></ej-qrcode-generator>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class QRCodeGeneratorComponent extends QRCodeGenerator implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic invalid: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        \n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-qrcodegenerator',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction QRCodeGeneratorComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nQRCodeGeneratorComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nQRCodeGeneratorComponent.ctorParameters;\n/** @type {?} */\nQRCodeGeneratorComponent.prototype.context;\n/** @type {?} */\nQRCodeGeneratorComponent.prototype.tagObjects;\n/** @type {?} */\nQRCodeGeneratorComponent.prototype.invalid;\n/** @type {?} */\nQRCodeGeneratorComponent.prototype.registerEvents;\n/** @type {?} */\nQRCodeGeneratorComponent.prototype.addTwoWay;\n/** @type {?} */\nQRCodeGeneratorComponent.prototype.ngEle;\n/** @type {?} */\nQRCodeGeneratorComponent.prototype.srenderer;\n/** @type {?} */\nQRCodeGeneratorComponent.prototype.viewContainerRef;\n/** @type {?} */\nQRCodeGeneratorComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { QRCodeGeneratorComponent } from './qrcodegenerator.component';\n/**\n * NgModule definition for the QRCodeGenerator component.\n */\nexport class QRCodeGeneratorModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        QRCodeGeneratorComponent\n    ],\n    exports: [\n        QRCodeGeneratorComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction QRCodeGeneratorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nQRCodeGeneratorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nQRCodeGeneratorModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { QRCodeGeneratorComponent } from './qrcodegenerator.component';\nimport { QRCodeGeneratorModule } from './qrcodegenerator.module';\n/**\n * NgModule definition for the QRCodeGenerator component with providers.\n */\nexport class QRCodeGeneratorAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, QRCodeGeneratorModule],\n    exports: [\n        QRCodeGeneratorModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction QRCodeGeneratorAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nQRCodeGeneratorAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nQRCodeGeneratorAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { DataMatrixGenerator } from '@syncfusion/ej2-barcode-generator';\n\n\n\nexport const /** @type {?} */ inputs: string[] = ['backgroundColor','displayText','enablePersistence','enableRtl','encoding','foreColor','height','locale','margin','mode','size','value','width','xDimension'];\nexport const /** @type {?} */ outputs: string[] = ['invalid'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * DataMatrix Component\n * ```html\n * <ej-datamatrix-generator></ej-datamatrix-generator>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class DataMatrixGeneratorComponent extends DataMatrixGenerator implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\npublic invalid: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        \n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-datamatrixgenerator',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\n}\n\nfunction DataMatrixGeneratorComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nDataMatrixGeneratorComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDataMatrixGeneratorComponent.ctorParameters;\n/** @type {?} */\nDataMatrixGeneratorComponent.prototype.context;\n/** @type {?} */\nDataMatrixGeneratorComponent.prototype.tagObjects;\n/** @type {?} */\nDataMatrixGeneratorComponent.prototype.invalid;\n/** @type {?} */\nDataMatrixGeneratorComponent.prototype.registerEvents;\n/** @type {?} */\nDataMatrixGeneratorComponent.prototype.addTwoWay;\n/** @type {?} */\nDataMatrixGeneratorComponent.prototype.ngEle;\n/** @type {?} */\nDataMatrixGeneratorComponent.prototype.srenderer;\n/** @type {?} */\nDataMatrixGeneratorComponent.prototype.viewContainerRef;\n/** @type {?} */\nDataMatrixGeneratorComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DataMatrixGeneratorComponent } from './datamatrixgenerator.component';\n/**\n * NgModule definition for the DataMatrixGenerator component.\n */\nexport class DataMatrixGeneratorModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        DataMatrixGeneratorComponent\n    ],\n    exports: [\n        DataMatrixGeneratorComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DataMatrixGeneratorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDataMatrixGeneratorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDataMatrixGeneratorModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DataMatrixGeneratorComponent } from './datamatrixgenerator.component';\nimport { DataMatrixGeneratorModule } from './datamatrixgenerator.module';\n/**\n * NgModule definition for the DataMatrixGenerator component with providers.\n */\nexport class DataMatrixGeneratorAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, DataMatrixGeneratorModule],\n    exports: [\n        DataMatrixGeneratorModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DataMatrixGeneratorAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDataMatrixGeneratorAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDataMatrixGeneratorAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {BarcodeGeneratorComponent,BarcodeGeneratorModule,BarcodeGeneratorAllModule,QRCodeGeneratorComponent,QRCodeGeneratorModule,QRCodeGeneratorAllModule,DataMatrixGeneratorComponent,DataMatrixGeneratorModule,DataMatrixGeneratorAllModule,BarcodeGenerator,BarcodeBase,BarcodeGeneratorModel,OneDimension,RenderingMode,BarcodeEvent,Alignment,TextPosition,QuietZone,DataMatrixEncoding,DataMatrixSize,BarcodeType,QRInputMode,QRCodeVersion,ErrorCorrectionLevel,BarcodeExportType,createHtmlElement,getChildNode,measureText,setAttribute,createSvgElement,createMeasureElements,Point,Rect,Size,DisplayText,DisplayTextModel,Margin,MarginModel,BarcodeCanvasRenderer,BarcodeRenderer,BaseAttributes,EncodingResult,PdfDataMatrixSymbolAttribute,Code93ExtendedValues,Code93ExtendedArrayAttribute,ValidateEvent,BarcodeSVGRenderer,CodaBar,Code128,Code128A,Code128B,Code128C,Code39,Ean8,Ean13,UpcA,UpcE,QRCode,ModuleValue,QRCodeGeneratorModel,QRCodeGenerator,PdfQRBarcodeValues,ErrorCorrectionCodewords,DataMatrixGenerator,DataMatrix,DataMatrixGeneratorModel} from './public_api';\n\nexport {inputs as ɵa,outputs as ɵb} from './src/barcode-generator/barcodegenerator.component';\nexport {inputs as ɵe,outputs as ɵf} from './src/datamatrix-generator/datamatrixgenerator.component';\nexport {inputs as ɵc,outputs as ɵd} from './src/qrcode-generator/qrcodegenerator.component';"]}
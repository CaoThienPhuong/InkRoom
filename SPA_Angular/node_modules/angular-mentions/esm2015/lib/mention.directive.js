import { ComponentFactoryResolver, Directive, ElementRef, ViewContainerRef } from "@angular/core";
import { EventEmitter, Input, Output } from "@angular/core";
import { getCaretPosition, getValue, insertValue, setCaretPosition } from './mention-utils';
import { MentionListComponent } from './mention-list.component';
const KEY_BACKSPACE = 8;
const KEY_TAB = 9;
const KEY_ENTER = 13;
const KEY_SHIFT = 16;
const KEY_ESCAPE = 27;
const KEY_SPACE = 32;
const KEY_LEFT = 37;
const KEY_UP = 38;
const KEY_RIGHT = 39;
const KEY_DOWN = 40;
const KEY_BUFFERED = 229;
/**
 * Angular Mentions.
 * https://github.com/dmacfarlane/angular-mentions
 *
 * Copyright (c) 2017 Dan MacFarlane
 */
export class MentionDirective {
    constructor(_element, _componentResolver, _viewContainerRef) {
        this._element = _element;
        this._componentResolver = _componentResolver;
        this._viewContainerRef = _viewContainerRef;
        // the provided configuration object
        this.mentionConfig = { items: [] };
        this.DEFAULT_CONFIG = {
            items: [],
            triggerChar: '@',
            labelKey: 'label',
            maxItems: -1,
            allowSpace: false,
            returnTrigger: false,
            mentionSelect: (item, triggerChar) => {
                return this.activeConfig.triggerChar + item[this.activeConfig.labelKey];
            },
            mentionFilter: (searchString, items) => {
                const searchStringLowerCase = searchString.toLowerCase();
                return items.filter(e => e[this.activeConfig.labelKey].toLowerCase().startsWith(searchStringLowerCase));
            }
        };
        // event emitted whenever the search term changes
        this.searchTerm = new EventEmitter();
        // event emitted when an item is selected
        this.itemSelected = new EventEmitter();
        // event emitted whenever the mention list is opened or closed
        this.opened = new EventEmitter();
        this.closed = new EventEmitter();
        this.triggerChars = {};
    }
    set mention(items) {
        this.mentionItems = items;
    }
    ngOnChanges(changes) {
        // console.log('config change', changes);
        if (changes['mention'] || changes['mentionConfig']) {
            this.updateConfig();
        }
    }
    updateConfig() {
        let config = this.mentionConfig;
        this.triggerChars = {};
        // use items from directive if they have been set
        if (this.mentionItems) {
            config.items = this.mentionItems;
        }
        this.addConfig(config);
        // nested configs
        if (config.mentions) {
            config.mentions.forEach(config => this.addConfig(config));
        }
    }
    // add configuration for a trigger char
    addConfig(config) {
        // defaults
        let defaults = Object.assign({}, this.DEFAULT_CONFIG);
        config = Object.assign(defaults, config);
        // items
        let items = config.items;
        if (items && items.length > 0) {
            // convert strings to objects
            if (typeof items[0] == 'string') {
                items = items.map((label) => {
                    let object = {};
                    object[config.labelKey] = label;
                    return object;
                });
            }
            if (config.labelKey) {
                // remove items without an labelKey (as it's required to filter the list)
                items = items.filter(e => e[config.labelKey]);
                if (!config.disableSort) {
                    items.sort((a, b) => a[config.labelKey].localeCompare(b[config.labelKey]));
                }
            }
        }
        config.items = items;
        // add the config
        this.triggerChars[config.triggerChar] = config;
        // for async update while menu/search is active
        if (this.activeConfig && this.activeConfig.triggerChar == config.triggerChar) {
            this.activeConfig = config;
            this.updateSearchList();
        }
    }
    setIframe(iframe) {
        this.iframe = iframe;
    }
    stopEvent(event) {
        //if (event instanceof KeyboardEvent) { // does not work for iframe
        if (!event.wasClick) {
            event.preventDefault();
            event.stopPropagation();
            event.stopImmediatePropagation();
        }
    }
    blurHandler(event) {
        this.stopEvent(event);
        this.stopSearch();
    }
    inputHandler(event, nativeElement = this._element.nativeElement) {
        if (this.lastKeyCode === KEY_BUFFERED && event.data) {
            let keyCode = event.data.charCodeAt(0);
            this.keyHandler({ keyCode, inputEvent: true }, nativeElement);
        }
    }
    // @param nativeElement is the alternative text element in an iframe scenario
    keyHandler(event, nativeElement = this._element.nativeElement) {
        this.lastKeyCode = event.keyCode;
        if (event.isComposing || event.keyCode === KEY_BUFFERED) {
            return;
        }
        let val = getValue(nativeElement);
        let pos = getCaretPosition(nativeElement, this.iframe);
        let charPressed = event.key;
        if (!charPressed) {
            let charCode = event.which || event.keyCode;
            if (!event.shiftKey && (charCode >= 65 && charCode <= 90)) {
                charPressed = String.fromCharCode(charCode + 32);
            }
            // else if (event.shiftKey && charCode === KEY_2) {
            //   charPressed = this.config.triggerChar;
            // }
            else {
                // TODO (dmacfarlane) fix this for non-alpha keys
                // http://stackoverflow.com/questions/2220196/how-to-decode-character-pressed-from-jquerys-keydowns-event-handler?lq=1
                charPressed = String.fromCharCode(event.which || event.keyCode);
            }
        }
        if (event.keyCode == KEY_ENTER && event.wasClick && pos < this.startPos) {
            // put caret back in position prior to contenteditable menu click
            pos = this.startNode.length;
            setCaretPosition(this.startNode, pos, this.iframe);
        }
        //console.log("keyHandler", this.startPos, pos, val, charPressed, event);
        let config = this.triggerChars[charPressed];
        if (config) {
            this.activeConfig = config;
            this.startPos = event.inputEvent ? pos - 1 : pos;
            this.startNode = (this.iframe ? this.iframe.contentWindow.getSelection() : window.getSelection()).anchorNode;
            this.searching = true;
            this.searchString = null;
            this.showSearchList(nativeElement);
            this.updateSearchList();
            if (config.returnTrigger) {
                this.searchTerm.emit(config.triggerChar);
            }
        }
        else if (this.startPos >= 0 && this.searching) {
            if (pos <= this.startPos) {
                this.searchList.hidden = true;
            }
            // ignore shift when pressed alone, but not when used with another key
            else if (event.keyCode !== KEY_SHIFT &&
                !event.metaKey &&
                !event.altKey &&
                !event.ctrlKey &&
                pos > this.startPos) {
                if (!this.activeConfig.allowSpace && event.keyCode === KEY_SPACE) {
                    this.startPos = -1;
                }
                else if (event.keyCode === KEY_BACKSPACE && pos > 0) {
                    pos--;
                    if (pos == this.startPos) {
                        this.stopSearch();
                    }
                }
                else if (this.searchList.hidden) {
                    if (event.keyCode === KEY_TAB || event.keyCode === KEY_ENTER) {
                        this.stopSearch();
                        return;
                    }
                }
                else if (!this.searchList.hidden) {
                    if (event.keyCode === KEY_TAB || event.keyCode === KEY_ENTER) {
                        this.stopEvent(event);
                        // emit the selected list item
                        this.itemSelected.emit(this.searchList.activeItem);
                        // optional function to format the selected item before inserting the text
                        const text = this.activeConfig.mentionSelect(this.searchList.activeItem, this.activeConfig.triggerChar);
                        // value is inserted without a trailing space for consistency
                        // between element types (div and iframe do not preserve the space)
                        insertValue(nativeElement, this.startPos, pos, text, this.iframe);
                        // fire input event so angular bindings are updated
                        if ("createEvent" in document) {
                            let evt = document.createEvent("HTMLEvents");
                            if (this.iframe) {
                                // a 'change' event is required to trigger tinymce updates
                                evt.initEvent("change", true, false);
                            }
                            else {
                                evt.initEvent("input", true, false);
                            }
                            // this seems backwards, but fire the event from this elements nativeElement (not the
                            // one provided that may be in an iframe, as it won't be propogate)
                            this._element.nativeElement.dispatchEvent(evt);
                        }
                        this.startPos = -1;
                        this.stopSearch();
                        return false;
                    }
                    else if (event.keyCode === KEY_ESCAPE) {
                        this.stopEvent(event);
                        this.stopSearch();
                        return false;
                    }
                    else if (event.keyCode === KEY_DOWN) {
                        this.stopEvent(event);
                        this.searchList.activateNextItem();
                        return false;
                    }
                    else if (event.keyCode === KEY_UP) {
                        this.stopEvent(event);
                        this.searchList.activatePreviousItem();
                        return false;
                    }
                }
                if (charPressed.length != 1 && event.keyCode != KEY_BACKSPACE) {
                    this.stopEvent(event);
                    return false;
                }
                else if (this.searching) {
                    let mention = val.substring(this.startPos + 1, pos);
                    if (event.keyCode !== KEY_BACKSPACE && !event.inputEvent) {
                        mention += charPressed;
                    }
                    this.searchString = mention;
                    if (this.activeConfig.returnTrigger) {
                        const triggerChar = (this.searchString || event.keyCode === KEY_BACKSPACE) ? val.substring(this.startPos, this.startPos + 1) : '';
                        this.searchTerm.emit(triggerChar + this.searchString);
                    }
                    else {
                        this.searchTerm.emit(this.searchString);
                    }
                    this.updateSearchList();
                }
            }
        }
    }
    // exposed for external calls to open the mention list, e.g. by clicking a button
    startSearch(triggerChar, nativeElement = this._element.nativeElement) {
        triggerChar = triggerChar || this.mentionConfig.triggerChar || this.DEFAULT_CONFIG.triggerChar;
        const pos = getCaretPosition(nativeElement, this.iframe);
        insertValue(nativeElement, pos, pos, triggerChar, this.iframe);
        this.keyHandler({ key: triggerChar, inputEvent: true }, nativeElement);
    }
    stopSearch() {
        if (this.searchList && !this.searchList.hidden) {
            this.searchList.hidden = true;
            this.closed.emit();
        }
        this.activeConfig = null;
        this.searching = false;
    }
    updateSearchList() {
        let matches = [];
        if (this.activeConfig && this.activeConfig.items) {
            let objects = this.activeConfig.items;
            // disabling the search relies on the async operation to do the filtering
            if (!this.activeConfig.disableSearch && this.searchString && this.activeConfig.labelKey) {
                if (this.activeConfig.mentionFilter) {
                    objects = this.activeConfig.mentionFilter(this.searchString, objects);
                }
            }
            matches = objects;
            if (this.activeConfig.maxItems > 0) {
                matches = matches.slice(0, this.activeConfig.maxItems);
            }
        }
        // update the search list
        if (this.searchList) {
            this.searchList.items = matches;
            this.searchList.hidden = matches.length == 0;
        }
    }
    showSearchList(nativeElement) {
        this.opened.emit();
        if (this.searchList == null) {
            let componentFactory = this._componentResolver.resolveComponentFactory(MentionListComponent);
            let componentRef = this._viewContainerRef.createComponent(componentFactory);
            this.searchList = componentRef.instance;
            this.searchList.itemTemplate = this.mentionListTemplate;
            componentRef.instance['itemClick'].subscribe(() => {
                nativeElement.focus();
                let fakeKeydown = { key: 'Enter', keyCode: KEY_ENTER, wasClick: true };
                this.keyHandler(fakeKeydown, nativeElement);
            });
        }
        this.searchList.labelKey = this.activeConfig.labelKey;
        this.searchList.dropUp = this.activeConfig.dropUp;
        this.searchList.styleOff = this.mentionConfig.disableStyle;
        this.searchList.activeIndex = 0;
        this.searchList.position(nativeElement, this.iframe);
        window.requestAnimationFrame(() => this.searchList.reset());
    }
}
MentionDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mention], [mentionConfig]',
                host: {
                    '(keydown)': 'keyHandler($event)',
                    '(input)': 'inputHandler($event)',
                    '(blur)': 'blurHandler($event)',
                    'autocomplete': 'off'
                }
            },] }
];
MentionDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef }
];
MentionDirective.propDecorators = {
    mention: [{ type: Input, args: ['mention',] }],
    mentionConfig: [{ type: Input }],
    mentionListTemplate: [{ type: Input }],
    searchTerm: [{ type: Output }],
    itemSelected: [{ type: Output }],
    opened: [{ type: Output }],
    closed: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudGlvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLW1lbnRpb25zL3NyYy9saWIvbWVudGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHdCQUF3QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQWUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0csT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUN0RixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRzVGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRWhFLE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBQztBQUN4QixNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUM7QUFDbEIsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ3JCLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUNyQixNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7QUFDdEIsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ3JCLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUNwQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDbEIsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ3JCLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUNwQixNQUFNLFlBQVksR0FBRyxHQUFHLENBQUM7QUFFekI7Ozs7O0dBS0c7QUFVSCxNQUFNLE9BQU8sZ0JBQWdCO0lBcUQzQixZQUNVLFFBQW9CLEVBQ3BCLGtCQUE0QyxFQUM1QyxpQkFBbUM7UUFGbkMsYUFBUSxHQUFSLFFBQVEsQ0FBWTtRQUNwQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQTBC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VyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBQzlDLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztRQUN0RCxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztRQUNsRCxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQztRQUMzRCxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyRCxNQUFNLENBQUMscUJBQXFCLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzlELENBQUM7OztZQTdWRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDRCQUE0QjtnQkFDdEMsSUFBSSxFQUFFO29CQUNKLFdBQVcsRUFBRSxvQkFBb0I7b0JBQ2pDLFNBQVMsRUFBRSxzQkFBc0I7b0JBQ2pDLFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLGNBQWMsRUFBRSxLQUFLO2lCQUN0QjthQUNGOzs7WUFqQzZDLFVBQVU7WUFBL0Msd0JBQXdCO1lBQXNDLGdCQUFnQjs7O3NCQXVDcEYsS0FBSyxTQUFDLFNBQVM7NEJBS2YsS0FBSztrQ0FxQkwsS0FBSzt5QkFHTCxNQUFNOzJCQUdOLE1BQU07cUJBR04sTUFBTTtxQkFDTixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGdldENhcmV0UG9zaXRpb24sIGdldFZhbHVlLCBpbnNlcnRWYWx1ZSwgc2V0Q2FyZXRQb3NpdGlvbiB9IGZyb20gJy4vbWVudGlvbi11dGlscyc7XG5cbmltcG9ydCB7IE1lbnRpb25Db25maWcgfSBmcm9tIFwiLi9tZW50aW9uLWNvbmZpZ1wiO1xuaW1wb3J0IHsgTWVudGlvbkxpc3RDb21wb25lbnQgfSBmcm9tICcuL21lbnRpb24tbGlzdC5jb21wb25lbnQnO1xuXG5jb25zdCBLRVlfQkFDS1NQQUNFID0gODtcbmNvbnN0IEtFWV9UQUIgPSA5O1xuY29uc3QgS0VZX0VOVEVSID0gMTM7XG5jb25zdCBLRVlfU0hJRlQgPSAxNjtcbmNvbnN0IEtFWV9FU0NBUEUgPSAyNztcbmNvbnN0IEtFWV9TUEFDRSA9IDMyO1xuY29uc3QgS0VZX0xFRlQgPSAzNztcbmNvbnN0IEtFWV9VUCA9IDM4O1xuY29uc3QgS0VZX1JJR0hUID0gMzk7XG5jb25zdCBLRVlfRE9XTiA9IDQwO1xuY29uc3QgS0VZX0JVRkZFUkVEID0gMjI5O1xuXG4vKipcbiAqIEFuZ3VsYXIgTWVudGlvbnMuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZG1hY2ZhcmxhbmUvYW5ndWxhci1tZW50aW9uc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNyBEYW4gTWFjRmFybGFuZVxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWVudGlvbl0sIFttZW50aW9uQ29uZmlnXScsXG4gIGhvc3Q6IHtcbiAgICAnKGtleWRvd24pJzogJ2tleUhhbmRsZXIoJGV2ZW50KScsXG4gICAgJyhpbnB1dCknOiAnaW5wdXRIYW5kbGVyKCRldmVudCknLFxuICAgICcoYmx1ciknOiAnYmx1ckhhbmRsZXIoJGV2ZW50KScsXG4gICAgJ2F1dG9jb21wbGV0ZSc6ICdvZmYnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgTWVudGlvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgLy8gc3RvcmVzIHRoZSBpdGVtcyBwYXNzZWQgdG8gdGhlIG1lbnRpb25zIGRpcmVjdGl2ZSBhbmQgdXNlZCB0byBwb3B1bGF0ZSB0aGUgcm9vdCBpdGVtcyBpbiBtZW50aW9uQ29uZmlnXG4gIHByaXZhdGUgbWVudGlvbkl0ZW1zOiBhbnlbXTtcblxuICBASW5wdXQoJ21lbnRpb24nKSBzZXQgbWVudGlvbihpdGVtczogYW55W10pIHtcbiAgICB0aGlzLm1lbnRpb25JdGVtcyA9IGl0ZW1zO1xuICB9XG5cbiAgLy8gdGhlIHByb3ZpZGVkIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gIEBJbnB1dCgpIG1lbnRpb25Db25maWc6IE1lbnRpb25Db25maWcgPSB7IGl0ZW1zOiBbXSB9O1xuXG4gIHByaXZhdGUgYWN0aXZlQ29uZmlnOiBNZW50aW9uQ29uZmlnO1xuXG4gIHByaXZhdGUgREVGQVVMVF9DT05GSUc6IE1lbnRpb25Db25maWcgPSB7XG4gICAgaXRlbXM6IFtdLFxuICAgIHRyaWdnZXJDaGFyOiAnQCcsXG4gICAgbGFiZWxLZXk6ICdsYWJlbCcsXG4gICAgbWF4SXRlbXM6IC0xLFxuICAgIGFsbG93U3BhY2U6IGZhbHNlLFxuICAgIHJldHVyblRyaWdnZXI6IGZhbHNlLFxuICAgIG1lbnRpb25TZWxlY3Q6IChpdGVtOiBhbnksIHRyaWdnZXJDaGFyPzogc3RyaW5nKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5hY3RpdmVDb25maWcudHJpZ2dlckNoYXIgKyBpdGVtW3RoaXMuYWN0aXZlQ29uZmlnLmxhYmVsS2V5XTtcbiAgICB9LFxuICAgIG1lbnRpb25GaWx0ZXI6IChzZWFyY2hTdHJpbmc6IHN0cmluZywgaXRlbXM6IGFueVtdKSA9PiB7XG4gICAgICBjb25zdCBzZWFyY2hTdHJpbmdMb3dlckNhc2UgPSBzZWFyY2hTdHJpbmcudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiBpdGVtcy5maWx0ZXIoZSA9PiBlW3RoaXMuYWN0aXZlQ29uZmlnLmxhYmVsS2V5XS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nTG93ZXJDYXNlKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gdGVtcGxhdGUgdG8gdXNlIGZvciByZW5kZXJpbmcgbGlzdCBpdGVtc1xuICBASW5wdXQoKSBtZW50aW9uTGlzdFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIC8vIGV2ZW50IGVtaXR0ZWQgd2hlbmV2ZXIgdGhlIHNlYXJjaCB0ZXJtIGNoYW5nZXNcbiAgQE91dHB1dCgpIHNlYXJjaFRlcm0gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICAvLyBldmVudCBlbWl0dGVkIHdoZW4gYW4gaXRlbSBpcyBzZWxlY3RlZFxuICBAT3V0cHV0KCkgaXRlbVNlbGVjdGVkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgLy8gZXZlbnQgZW1pdHRlZCB3aGVuZXZlciB0aGUgbWVudGlvbiBsaXN0IGlzIG9wZW5lZCBvciBjbG9zZWRcbiAgQE91dHB1dCgpIG9wZW5lZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIGNsb3NlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBwcml2YXRlIHRyaWdnZXJDaGFyczogeyBba2V5OiBzdHJpbmddOiBNZW50aW9uQ29uZmlnIH0gPSB7fTtcblxuICBwcml2YXRlIHNlYXJjaFN0cmluZzogc3RyaW5nO1xuICBwcml2YXRlIHN0YXJ0UG9zOiBudW1iZXI7XG4gIHByaXZhdGUgc3RhcnROb2RlO1xuICBwcml2YXRlIHNlYXJjaExpc3Q6IE1lbnRpb25MaXN0Q29tcG9uZW50O1xuICBwcml2YXRlIHNlYXJjaGluZzogYm9vbGVhbjtcbiAgcHJpdmF0ZSBpZnJhbWU6IGFueTsgLy8gb3B0aW9uYWxcbiAgcHJpdmF0ZSBsYXN0S2V5Q29kZTogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2VsZW1lbnQ6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBfY29tcG9uZW50UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBwcml2YXRlIF92aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmXG4gICkgeyB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIC8vIGNvbnNvbGUubG9nKCdjb25maWcgY2hhbmdlJywgY2hhbmdlcyk7XG4gICAgaWYgKGNoYW5nZXNbJ21lbnRpb24nXSB8fCBjaGFuZ2VzWydtZW50aW9uQ29uZmlnJ10pIHtcbiAgICAgIHRoaXMudXBkYXRlQ29uZmlnKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHVwZGF0ZUNvbmZpZygpIHtcbiAgICBsZXQgY29uZmlnID0gdGhpcy5tZW50aW9uQ29uZmlnO1xuICAgIHRoaXMudHJpZ2dlckNoYXJzID0ge307XG4gICAgLy8gdXNlIGl0ZW1zIGZyb20gZGlyZWN0aXZlIGlmIHRoZXkgaGF2ZSBiZWVuIHNldFxuICAgIGlmICh0aGlzLm1lbnRpb25JdGVtcykge1xuICAgICAgY29uZmlnLml0ZW1zID0gdGhpcy5tZW50aW9uSXRlbXM7XG4gICAgfVxuICAgIHRoaXMuYWRkQ29uZmlnKGNvbmZpZyk7XG4gICAgLy8gbmVzdGVkIGNvbmZpZ3NcbiAgICBpZiAoY29uZmlnLm1lbnRpb25zKSB7XG4gICAgICBjb25maWcubWVudGlvbnMuZm9yRWFjaChjb25maWcgPT4gdGhpcy5hZGRDb25maWcoY29uZmlnKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gYWRkIGNvbmZpZ3VyYXRpb24gZm9yIGEgdHJpZ2dlciBjaGFyXG4gIHByaXZhdGUgYWRkQ29uZmlnKGNvbmZpZzogTWVudGlvbkNvbmZpZykge1xuICAgIC8vIGRlZmF1bHRzXG4gICAgbGV0IGRlZmF1bHRzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5ERUZBVUxUX0NPTkZJRyk7XG4gICAgY29uZmlnID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0cywgY29uZmlnKTtcbiAgICAvLyBpdGVtc1xuICAgIGxldCBpdGVtcyA9IGNvbmZpZy5pdGVtcztcbiAgICBpZiAoaXRlbXMgJiYgaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgLy8gY29udmVydCBzdHJpbmdzIHRvIG9iamVjdHNcbiAgICAgIGlmICh0eXBlb2YgaXRlbXNbMF0gPT0gJ3N0cmluZycpIHtcbiAgICAgICAgaXRlbXMgPSBpdGVtcy5tYXAoKGxhYmVsKSA9PiB7XG4gICAgICAgICAgbGV0IG9iamVjdCA9IHt9O1xuICAgICAgICAgIG9iamVjdFtjb25maWcubGFiZWxLZXldID0gbGFiZWw7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoY29uZmlnLmxhYmVsS2V5KSB7XG4gICAgICAgIC8vIHJlbW92ZSBpdGVtcyB3aXRob3V0IGFuIGxhYmVsS2V5IChhcyBpdCdzIHJlcXVpcmVkIHRvIGZpbHRlciB0aGUgbGlzdClcbiAgICAgICAgaXRlbXMgPSBpdGVtcy5maWx0ZXIoZSA9PiBlW2NvbmZpZy5sYWJlbEtleV0pO1xuICAgICAgICBpZiAoIWNvbmZpZy5kaXNhYmxlU29ydCkge1xuICAgICAgICAgIGl0ZW1zLnNvcnQoKGEsIGIpID0+IGFbY29uZmlnLmxhYmVsS2V5XS5sb2NhbGVDb21wYXJlKGJbY29uZmlnLmxhYmVsS2V5XSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbmZpZy5pdGVtcyA9IGl0ZW1zO1xuXG4gICAgLy8gYWRkIHRoZSBjb25maWdcbiAgICB0aGlzLnRyaWdnZXJDaGFyc1tjb25maWcudHJpZ2dlckNoYXJdID0gY29uZmlnO1xuXG4gICAgLy8gZm9yIGFzeW5jIHVwZGF0ZSB3aGlsZSBtZW51L3NlYXJjaCBpcyBhY3RpdmVcbiAgICBpZiAodGhpcy5hY3RpdmVDb25maWcgJiYgdGhpcy5hY3RpdmVDb25maWcudHJpZ2dlckNoYXIgPT0gY29uZmlnLnRyaWdnZXJDaGFyKSB7XG4gICAgICB0aGlzLmFjdGl2ZUNvbmZpZyA9IGNvbmZpZztcbiAgICAgIHRoaXMudXBkYXRlU2VhcmNoTGlzdCgpO1xuICAgIH1cbiAgfVxuXG4gIHNldElmcmFtZShpZnJhbWU6IEhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgdGhpcy5pZnJhbWUgPSBpZnJhbWU7XG4gIH1cblxuICBzdG9wRXZlbnQoZXZlbnQ6IGFueSkge1xuICAgIC8vaWYgKGV2ZW50IGluc3RhbmNlb2YgS2V5Ym9hcmRFdmVudCkgeyAvLyBkb2VzIG5vdCB3b3JrIGZvciBpZnJhbWVcbiAgICBpZiAoIWV2ZW50Lndhc0NsaWNrKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBibHVySGFuZGxlcihldmVudDogYW55KSB7XG4gICAgdGhpcy5zdG9wRXZlbnQoZXZlbnQpO1xuICAgIHRoaXMuc3RvcFNlYXJjaCgpO1xuICB9XG5cbiAgaW5wdXRIYW5kbGVyKGV2ZW50OiBhbnksIG5hdGl2ZUVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQgPSB0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpIHtcbiAgICBpZiAodGhpcy5sYXN0S2V5Q29kZSA9PT0gS0VZX0JVRkZFUkVEICYmIGV2ZW50LmRhdGEpIHtcbiAgICAgIGxldCBrZXlDb2RlID0gZXZlbnQuZGF0YS5jaGFyQ29kZUF0KDApO1xuICAgICAgdGhpcy5rZXlIYW5kbGVyKHsga2V5Q29kZSwgaW5wdXRFdmVudDogdHJ1ZSB9LCBuYXRpdmVFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICAvLyBAcGFyYW0gbmF0aXZlRWxlbWVudCBpcyB0aGUgYWx0ZXJuYXRpdmUgdGV4dCBlbGVtZW50IGluIGFuIGlmcmFtZSBzY2VuYXJpb1xuICBrZXlIYW5kbGVyKGV2ZW50OiBhbnksIG5hdGl2ZUVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQgPSB0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpIHtcbiAgICB0aGlzLmxhc3RLZXlDb2RlID0gZXZlbnQua2V5Q29kZTtcblxuICAgIGlmIChldmVudC5pc0NvbXBvc2luZyB8fCBldmVudC5rZXlDb2RlID09PSBLRVlfQlVGRkVSRUQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgdmFsOiBzdHJpbmcgPSBnZXRWYWx1ZShuYXRpdmVFbGVtZW50KTtcbiAgICBsZXQgcG9zID0gZ2V0Q2FyZXRQb3NpdGlvbihuYXRpdmVFbGVtZW50LCB0aGlzLmlmcmFtZSk7XG4gICAgbGV0IGNoYXJQcmVzc2VkID0gZXZlbnQua2V5O1xuICAgIGlmICghY2hhclByZXNzZWQpIHtcbiAgICAgIGxldCBjaGFyQ29kZSA9IGV2ZW50LndoaWNoIHx8IGV2ZW50LmtleUNvZGU7XG4gICAgICBpZiAoIWV2ZW50LnNoaWZ0S2V5ICYmIChjaGFyQ29kZSA+PSA2NSAmJiBjaGFyQ29kZSA8PSA5MCkpIHtcbiAgICAgICAgY2hhclByZXNzZWQgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlICsgMzIpO1xuICAgICAgfVxuICAgICAgLy8gZWxzZSBpZiAoZXZlbnQuc2hpZnRLZXkgJiYgY2hhckNvZGUgPT09IEtFWV8yKSB7XG4gICAgICAvLyAgIGNoYXJQcmVzc2VkID0gdGhpcy5jb25maWcudHJpZ2dlckNoYXI7XG4gICAgICAvLyB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gVE9ETyAoZG1hY2ZhcmxhbmUpIGZpeCB0aGlzIGZvciBub24tYWxwaGEga2V5c1xuICAgICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIyMjAxOTYvaG93LXRvLWRlY29kZS1jaGFyYWN0ZXItcHJlc3NlZC1mcm9tLWpxdWVyeXMta2V5ZG93bnMtZXZlbnQtaGFuZGxlcj9scT0xXG4gICAgICAgIGNoYXJQcmVzc2VkID0gU3RyaW5nLmZyb21DaGFyQ29kZShldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT0gS0VZX0VOVEVSICYmIGV2ZW50Lndhc0NsaWNrICYmIHBvcyA8IHRoaXMuc3RhcnRQb3MpIHtcbiAgICAgIC8vIHB1dCBjYXJldCBiYWNrIGluIHBvc2l0aW9uIHByaW9yIHRvIGNvbnRlbnRlZGl0YWJsZSBtZW51IGNsaWNrXG4gICAgICBwb3MgPSB0aGlzLnN0YXJ0Tm9kZS5sZW5ndGg7XG4gICAgICBzZXRDYXJldFBvc2l0aW9uKHRoaXMuc3RhcnROb2RlLCBwb3MsIHRoaXMuaWZyYW1lKTtcbiAgICB9XG4gICAgLy9jb25zb2xlLmxvZyhcImtleUhhbmRsZXJcIiwgdGhpcy5zdGFydFBvcywgcG9zLCB2YWwsIGNoYXJQcmVzc2VkLCBldmVudCk7XG5cbiAgICBsZXQgY29uZmlnID0gdGhpcy50cmlnZ2VyQ2hhcnNbY2hhclByZXNzZWRdO1xuICAgIGlmIChjb25maWcpIHtcbiAgICAgIHRoaXMuYWN0aXZlQ29uZmlnID0gY29uZmlnO1xuICAgICAgdGhpcy5zdGFydFBvcyA9IGV2ZW50LmlucHV0RXZlbnQgPyBwb3MgLSAxIDogcG9zO1xuICAgICAgdGhpcy5zdGFydE5vZGUgPSAodGhpcy5pZnJhbWUgPyB0aGlzLmlmcmFtZS5jb250ZW50V2luZG93LmdldFNlbGVjdGlvbigpIDogd2luZG93LmdldFNlbGVjdGlvbigpKS5hbmNob3JOb2RlO1xuICAgICAgdGhpcy5zZWFyY2hpbmcgPSB0cnVlO1xuICAgICAgdGhpcy5zZWFyY2hTdHJpbmcgPSBudWxsO1xuICAgICAgdGhpcy5zaG93U2VhcmNoTGlzdChuYXRpdmVFbGVtZW50KTtcbiAgICAgIHRoaXMudXBkYXRlU2VhcmNoTGlzdCgpO1xuXG4gICAgICBpZiAoY29uZmlnLnJldHVyblRyaWdnZXIpIHtcbiAgICAgICAgdGhpcy5zZWFyY2hUZXJtLmVtaXQoY29uZmlnLnRyaWdnZXJDaGFyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5zdGFydFBvcyA+PSAwICYmIHRoaXMuc2VhcmNoaW5nKSB7XG4gICAgICBpZiAocG9zIDw9IHRoaXMuc3RhcnRQb3MpIHtcbiAgICAgICAgdGhpcy5zZWFyY2hMaXN0LmhpZGRlbiA9IHRydWU7XG4gICAgICB9XG4gICAgICAvLyBpZ25vcmUgc2hpZnQgd2hlbiBwcmVzc2VkIGFsb25lLCBidXQgbm90IHdoZW4gdXNlZCB3aXRoIGFub3RoZXIga2V5XG4gICAgICBlbHNlIGlmIChldmVudC5rZXlDb2RlICE9PSBLRVlfU0hJRlQgJiZcbiAgICAgICAgIWV2ZW50Lm1ldGFLZXkgJiZcbiAgICAgICAgIWV2ZW50LmFsdEtleSAmJlxuICAgICAgICAhZXZlbnQuY3RybEtleSAmJlxuICAgICAgICBwb3MgPiB0aGlzLnN0YXJ0UG9zXG4gICAgICApIHtcbiAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZUNvbmZpZy5hbGxvd1NwYWNlICYmIGV2ZW50LmtleUNvZGUgPT09IEtFWV9TUEFDRSkge1xuICAgICAgICAgIHRoaXMuc3RhcnRQb3MgPSAtMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSBLRVlfQkFDS1NQQUNFICYmIHBvcyA+IDApIHtcbiAgICAgICAgICBwb3MtLTtcbiAgICAgICAgICBpZiAocG9zID09IHRoaXMuc3RhcnRQb3MpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcFNlYXJjaCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnNlYXJjaExpc3QuaGlkZGVuKSB7XG4gICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IEtFWV9UQUIgfHwgZXZlbnQua2V5Q29kZSA9PT0gS0VZX0VOVEVSKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3BTZWFyY2goKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRoaXMuc2VhcmNoTGlzdC5oaWRkZW4pIHtcbiAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gS0VZX1RBQiB8fCBldmVudC5rZXlDb2RlID09PSBLRVlfRU5URVIpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIC8vIGVtaXQgdGhlIHNlbGVjdGVkIGxpc3QgaXRlbVxuICAgICAgICAgICAgdGhpcy5pdGVtU2VsZWN0ZWQuZW1pdCh0aGlzLnNlYXJjaExpc3QuYWN0aXZlSXRlbSk7XG4gICAgICAgICAgICAvLyBvcHRpb25hbCBmdW5jdGlvbiB0byBmb3JtYXQgdGhlIHNlbGVjdGVkIGl0ZW0gYmVmb3JlIGluc2VydGluZyB0aGUgdGV4dFxuICAgICAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMuYWN0aXZlQ29uZmlnLm1lbnRpb25TZWxlY3QodGhpcy5zZWFyY2hMaXN0LmFjdGl2ZUl0ZW0sIHRoaXMuYWN0aXZlQ29uZmlnLnRyaWdnZXJDaGFyKTtcbiAgICAgICAgICAgIC8vIHZhbHVlIGlzIGluc2VydGVkIHdpdGhvdXQgYSB0cmFpbGluZyBzcGFjZSBmb3IgY29uc2lzdGVuY3lcbiAgICAgICAgICAgIC8vIGJldHdlZW4gZWxlbWVudCB0eXBlcyAoZGl2IGFuZCBpZnJhbWUgZG8gbm90IHByZXNlcnZlIHRoZSBzcGFjZSlcbiAgICAgICAgICAgIGluc2VydFZhbHVlKG5hdGl2ZUVsZW1lbnQsIHRoaXMuc3RhcnRQb3MsIHBvcywgdGV4dCwgdGhpcy5pZnJhbWUpO1xuICAgICAgICAgICAgLy8gZmlyZSBpbnB1dCBldmVudCBzbyBhbmd1bGFyIGJpbmRpbmdzIGFyZSB1cGRhdGVkXG4gICAgICAgICAgICBpZiAoXCJjcmVhdGVFdmVudFwiIGluIGRvY3VtZW50KSB7XG4gICAgICAgICAgICAgIGxldCBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkhUTUxFdmVudHNcIik7XG4gICAgICAgICAgICAgIGlmICh0aGlzLmlmcmFtZSkge1xuICAgICAgICAgICAgICAgIC8vIGEgJ2NoYW5nZScgZXZlbnQgaXMgcmVxdWlyZWQgdG8gdHJpZ2dlciB0aW55bWNlIHVwZGF0ZXNcbiAgICAgICAgICAgICAgICBldnQuaW5pdEV2ZW50KFwiY2hhbmdlXCIsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBldnQuaW5pdEV2ZW50KFwiaW5wdXRcIiwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIHRoaXMgc2VlbXMgYmFja3dhcmRzLCBidXQgZmlyZSB0aGUgZXZlbnQgZnJvbSB0aGlzIGVsZW1lbnRzIG5hdGl2ZUVsZW1lbnQgKG5vdCB0aGVcbiAgICAgICAgICAgICAgLy8gb25lIHByb3ZpZGVkIHRoYXQgbWF5IGJlIGluIGFuIGlmcmFtZSwgYXMgaXQgd29uJ3QgYmUgcHJvcG9nYXRlKVxuICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdGFydFBvcyA9IC0xO1xuICAgICAgICAgICAgdGhpcy5zdG9wU2VhcmNoKCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IEtFWV9FU0NBUEUpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuc3RvcFNlYXJjaCgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSBLRVlfRE9XTikge1xuICAgICAgICAgICAgdGhpcy5zdG9wRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5zZWFyY2hMaXN0LmFjdGl2YXRlTmV4dEl0ZW0oKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PT0gS0VZX1VQKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3BFdmVudChldmVudCk7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaExpc3QuYWN0aXZhdGVQcmV2aW91c0l0ZW0oKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhclByZXNzZWQubGVuZ3RoIT0xICYmIGV2ZW50LmtleUNvZGUhPUtFWV9CQUNLU1BBQ0UpIHtcbiAgICAgICAgICB0aGlzLnN0b3BFdmVudChldmVudCk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc2VhcmNoaW5nKSB7XG4gICAgICAgICAgbGV0IG1lbnRpb24gPSB2YWwuc3Vic3RyaW5nKHRoaXMuc3RhcnRQb3MgKyAxLCBwb3MpO1xuICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlICE9PSBLRVlfQkFDS1NQQUNFICYmICFldmVudC5pbnB1dEV2ZW50KSB7XG4gICAgICAgICAgICBtZW50aW9uICs9IGNoYXJQcmVzc2VkO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNlYXJjaFN0cmluZyA9IG1lbnRpb247XG4gICAgICAgICAgaWYgKHRoaXMuYWN0aXZlQ29uZmlnLnJldHVyblRyaWdnZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRyaWdnZXJDaGFyID0gKHRoaXMuc2VhcmNoU3RyaW5nIHx8IGV2ZW50LmtleUNvZGUgPT09IEtFWV9CQUNLU1BBQ0UpID8gdmFsLnN1YnN0cmluZyh0aGlzLnN0YXJ0UG9zLCB0aGlzLnN0YXJ0UG9zICsgMSkgOiAnJztcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoVGVybS5lbWl0KHRyaWdnZXJDaGFyICsgdGhpcy5zZWFyY2hTdHJpbmcpO1xuICAgICAgICAgIH0gXG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaFRlcm0uZW1pdCh0aGlzLnNlYXJjaFN0cmluZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMudXBkYXRlU2VhcmNoTGlzdCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gZXhwb3NlZCBmb3IgZXh0ZXJuYWwgY2FsbHMgdG8gb3BlbiB0aGUgbWVudGlvbiBsaXN0LCBlLmcuIGJ5IGNsaWNraW5nIGEgYnV0dG9uXG4gIHB1YmxpYyBzdGFydFNlYXJjaCh0cmlnZ2VyQ2hhcj86IHN0cmluZywgbmF0aXZlRWxlbWVudDogSFRNTElucHV0RWxlbWVudCA9IHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCkge1xuICAgIHRyaWdnZXJDaGFyID0gdHJpZ2dlckNoYXIgfHwgdGhpcy5tZW50aW9uQ29uZmlnLnRyaWdnZXJDaGFyIHx8IHRoaXMuREVGQVVMVF9DT05GSUcudHJpZ2dlckNoYXI7XG4gICAgY29uc3QgcG9zID0gZ2V0Q2FyZXRQb3NpdGlvbihuYXRpdmVFbGVtZW50LCB0aGlzLmlmcmFtZSk7XG4gICAgaW5zZXJ0VmFsdWUobmF0aXZlRWxlbWVudCwgcG9zLCBwb3MsIHRyaWdnZXJDaGFyLCB0aGlzLmlmcmFtZSk7XG4gICAgdGhpcy5rZXlIYW5kbGVyKHsga2V5OiB0cmlnZ2VyQ2hhciwgaW5wdXRFdmVudDogdHJ1ZSB9LCBuYXRpdmVFbGVtZW50KTtcbiAgfVxuXG4gIHN0b3BTZWFyY2goKSB7XG4gICAgaWYgKHRoaXMuc2VhcmNoTGlzdCAmJiAhdGhpcy5zZWFyY2hMaXN0LmhpZGRlbikge1xuICAgICAgdGhpcy5zZWFyY2hMaXN0LmhpZGRlbiA9IHRydWU7XG4gICAgICB0aGlzLmNsb3NlZC5lbWl0KCk7XG4gICAgfVxuICAgIHRoaXMuYWN0aXZlQ29uZmlnID0gbnVsbDtcbiAgICB0aGlzLnNlYXJjaGluZyA9IGZhbHNlO1xuICB9XG5cbiAgdXBkYXRlU2VhcmNoTGlzdCgpIHtcbiAgICBsZXQgbWF0Y2hlczogYW55W10gPSBbXTtcbiAgICBpZiAodGhpcy5hY3RpdmVDb25maWcgJiYgdGhpcy5hY3RpdmVDb25maWcuaXRlbXMpIHtcbiAgICAgIGxldCBvYmplY3RzID0gdGhpcy5hY3RpdmVDb25maWcuaXRlbXM7XG4gICAgICAvLyBkaXNhYmxpbmcgdGhlIHNlYXJjaCByZWxpZXMgb24gdGhlIGFzeW5jIG9wZXJhdGlvbiB0byBkbyB0aGUgZmlsdGVyaW5nXG4gICAgICBpZiAoIXRoaXMuYWN0aXZlQ29uZmlnLmRpc2FibGVTZWFyY2ggJiYgdGhpcy5zZWFyY2hTdHJpbmcgJiYgdGhpcy5hY3RpdmVDb25maWcubGFiZWxLZXkpIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlQ29uZmlnLm1lbnRpb25GaWx0ZXIpIHtcbiAgICAgICAgICBvYmplY3RzID0gdGhpcy5hY3RpdmVDb25maWcubWVudGlvbkZpbHRlcih0aGlzLnNlYXJjaFN0cmluZywgb2JqZWN0cyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG1hdGNoZXMgPSBvYmplY3RzO1xuICAgICAgaWYgKHRoaXMuYWN0aXZlQ29uZmlnLm1heEl0ZW1zID4gMCkge1xuICAgICAgICBtYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgwLCB0aGlzLmFjdGl2ZUNvbmZpZy5tYXhJdGVtcyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVwZGF0ZSB0aGUgc2VhcmNoIGxpc3RcbiAgICBpZiAodGhpcy5zZWFyY2hMaXN0KSB7XG4gICAgICB0aGlzLnNlYXJjaExpc3QuaXRlbXMgPSBtYXRjaGVzO1xuICAgICAgdGhpcy5zZWFyY2hMaXN0LmhpZGRlbiA9IG1hdGNoZXMubGVuZ3RoID09IDA7XG4gICAgfVxuICB9XG5cbiAgc2hvd1NlYXJjaExpc3QobmF0aXZlRWxlbWVudDogSFRNTElucHV0RWxlbWVudCkge1xuICAgIHRoaXMub3BlbmVkLmVtaXQoKTtcblxuICAgIGlmICh0aGlzLnNlYXJjaExpc3QgPT0gbnVsbCkge1xuICAgICAgbGV0IGNvbXBvbmVudEZhY3RvcnkgPSB0aGlzLl9jb21wb25lbnRSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShNZW50aW9uTGlzdENvbXBvbmVudCk7XG4gICAgICBsZXQgY29tcG9uZW50UmVmID0gdGhpcy5fdmlld0NvbnRhaW5lclJlZi5jcmVhdGVDb21wb25lbnQoY29tcG9uZW50RmFjdG9yeSk7XG4gICAgICB0aGlzLnNlYXJjaExpc3QgPSBjb21wb25lbnRSZWYuaW5zdGFuY2U7XG4gICAgICB0aGlzLnNlYXJjaExpc3QuaXRlbVRlbXBsYXRlID0gdGhpcy5tZW50aW9uTGlzdFRlbXBsYXRlO1xuICAgICAgY29tcG9uZW50UmVmLmluc3RhbmNlWydpdGVtQ2xpY2snXS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICBuYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIGxldCBmYWtlS2V5ZG93biA9IHsga2V5OiAnRW50ZXInLCBrZXlDb2RlOiBLRVlfRU5URVIsIHdhc0NsaWNrOiB0cnVlIH07XG4gICAgICAgIHRoaXMua2V5SGFuZGxlcihmYWtlS2V5ZG93biwgbmF0aXZlRWxlbWVudCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5zZWFyY2hMaXN0LmxhYmVsS2V5ID0gdGhpcy5hY3RpdmVDb25maWcubGFiZWxLZXk7XG4gICAgdGhpcy5zZWFyY2hMaXN0LmRyb3BVcCA9IHRoaXMuYWN0aXZlQ29uZmlnLmRyb3BVcDtcbiAgICB0aGlzLnNlYXJjaExpc3Quc3R5bGVPZmYgPSB0aGlzLm1lbnRpb25Db25maWcuZGlzYWJsZVN0eWxlO1xuICAgIHRoaXMuc2VhcmNoTGlzdC5hY3RpdmVJbmRleCA9IDA7XG4gICAgdGhpcy5zZWFyY2hMaXN0LnBvc2l0aW9uKG5hdGl2ZUVsZW1lbnQsIHRoaXMuaWZyYW1lKTtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuc2VhcmNoTGlzdC5yZXNldCgpKTtcbiAgfVxufVxuIl19